CCS PCH C Compiler, Version 5.008, 5967               31-may.-19 18:13

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\sensor_ultrasonido\leer_distancia_bucle.lst

               ROM used:   672 bytes (2%)
                           Largest free fragment is 30044
               RAM used:   8 (0%) at main() level
                           25 (1%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0800:  GOTO   0A64
.................... #include "tarjeta.h" 
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
*
0808:  MOVLW  8E
080A:  MOVWF  00
080C:  MOVFF  0C,01
0810:  MOVFF  0B,02
0814:  CLRF   03
0816:  MOVF   01,F
0818:  BNZ   082C
081A:  MOVFF  02,01
081E:  CLRF   02
0820:  MOVLW  08
0822:  SUBWF  00,F
0824:  MOVF   01,F
0826:  BNZ   082C
0828:  CLRF   00
082A:  BRA    083C
082C:  BCF    FD8.0
082E:  BTFSC  01.7
0830:  BRA    083A
0832:  RLCF   02,F
0834:  RLCF   01,F
0836:  DECF   00,F
0838:  BRA    082C
083A:  BCF    01.7
083C:  GOTO   0A04 (RETURN)
0840:  MOVF   0B,W
0842:  BTFSC  FD8.2
0844:  BRA    0990
0846:  MOVWF  17
0848:  MOVF   0F,W
084A:  BTFSC  FD8.2
084C:  BRA    0990
084E:  SUBWF  17,F
0850:  BNC   085C
0852:  MOVLW  7F
0854:  ADDWF  17,F
0856:  BTFSC  FD8.0
0858:  BRA    0990
085A:  BRA    0868
085C:  MOVLW  81
085E:  SUBWF  17,F
0860:  BTFSS  FD8.0
0862:  BRA    0990
0864:  BTFSC  FD8.2
0866:  BRA    0990
0868:  MOVFF  17,00
086C:  CLRF   01
086E:  CLRF   02
0870:  CLRF   03
0872:  CLRF   16
0874:  MOVFF  0C,15
0878:  BSF    15.7
087A:  MOVFF  0D,14
087E:  MOVFF  0E,13
0882:  MOVLW  19
0884:  MOVWF  17
0886:  MOVF   12,W
0888:  SUBWF  13,F
088A:  BC    08A6
088C:  MOVLW  01
088E:  SUBWF  14,F
0890:  BC    08A6
0892:  SUBWF  15,F
0894:  BC    08A6
0896:  SUBWF  16,F
0898:  BC    08A6
089A:  INCF   16,F
089C:  INCF   15,F
089E:  INCF   14,F
08A0:  MOVF   12,W
08A2:  ADDWF  13,F
08A4:  BRA    08F6
08A6:  MOVF   11,W
08A8:  SUBWF  14,F
08AA:  BC    08D0
08AC:  MOVLW  01
08AE:  SUBWF  15,F
08B0:  BC    08D0
08B2:  SUBWF  16,F
08B4:  BC    08D0
08B6:  INCF   16,F
08B8:  INCF   15,F
08BA:  MOVF   11,W
08BC:  ADDWF  14,F
08BE:  MOVF   12,W
08C0:  ADDWF  13,F
08C2:  BNC   08F6
08C4:  INCF   14,F
08C6:  BNZ   08F6
08C8:  INCF   15,F
08CA:  BNZ   08F6
08CC:  INCF   16,F
08CE:  BRA    08F6
08D0:  MOVF   10,W
08D2:  IORLW  80
08D4:  SUBWF  15,F
08D6:  BC    08F4
08D8:  MOVLW  01
08DA:  SUBWF  16,F
08DC:  BC    08F4
08DE:  INCF   16,F
08E0:  MOVF   10,W
08E2:  IORLW  80
08E4:  ADDWF  15,F
08E6:  MOVF   11,W
08E8:  ADDWF  14,F
08EA:  BNC   08BE
08EC:  INCF   15,F
08EE:  BNZ   08BE
08F0:  INCF   16,F
08F2:  BRA    08BE
08F4:  BSF    03.0
08F6:  DECFSZ 17,F
08F8:  BRA    08FC
08FA:  BRA    0912
08FC:  BCF    FD8.0
08FE:  RLCF   13,F
0900:  RLCF   14,F
0902:  RLCF   15,F
0904:  RLCF   16,F
0906:  BCF    FD8.0
0908:  RLCF   03,F
090A:  RLCF   02,F
090C:  RLCF   01,F
090E:  RLCF   18,F
0910:  BRA    0886
0912:  BTFSS  18.0
0914:  BRA    0922
0916:  BCF    FD8.0
0918:  RRCF   01,F
091A:  RRCF   02,F
091C:  RRCF   03,F
091E:  RRCF   18,F
0920:  BRA    0926
0922:  DECF   00,F
0924:  BZ    0990
0926:  BTFSC  18.7
0928:  BRA    0966
092A:  BCF    FD8.0
092C:  RLCF   13,F
092E:  RLCF   14,F
0930:  RLCF   15,F
0932:  RLCF   16,F
0934:  MOVF   12,W
0936:  SUBWF  13,F
0938:  BC    0948
093A:  MOVLW  01
093C:  SUBWF  14,F
093E:  BC    0948
0940:  SUBWF  15,F
0942:  BC    0948
0944:  SUBWF  16,F
0946:  BNC   097C
0948:  MOVF   11,W
094A:  SUBWF  14,F
094C:  BC    0958
094E:  MOVLW  01
0950:  SUBWF  15,F
0952:  BC    0958
0954:  SUBWF  16,F
0956:  BNC   097C
0958:  MOVF   10,W
095A:  IORLW  80
095C:  SUBWF  15,F
095E:  BC    0966
0960:  MOVLW  01
0962:  SUBWF  16,F
0964:  BNC   097C
0966:  INCF   03,F
0968:  BNZ   097C
096A:  INCF   02,F
096C:  BNZ   097C
096E:  INCF   01,F
0970:  BNZ   097C
0972:  INCF   00,F
0974:  BZ    0990
0976:  RRCF   01,F
0978:  RRCF   02,F
097A:  RRCF   03,F
097C:  MOVFF  0C,17
0980:  MOVF   10,W
0982:  XORWF  17,F
0984:  BTFSS  17.7
0986:  BRA    098C
0988:  BSF    01.7
098A:  BRA    0998
098C:  BCF    01.7
098E:  BRA    0998
0990:  CLRF   00
0992:  CLRF   01
0994:  CLRF   02
0996:  CLRF   03
0998:  GOTO   0A22 (RETURN)
099C:  MOVLW  8E
099E:  MOVWF  00
09A0:  MOVF   0B,W
09A2:  SUBWF  00,F
09A4:  MOVFF  0C,02
09A8:  MOVFF  0D,01
09AC:  BSF    02.7
09AE:  MOVF   00,F
09B0:  BZ    09C4
09B2:  BCF    FD8.0
09B4:  MOVF   02,F
09B6:  BNZ   09BC
09B8:  MOVF   01,F
09BA:  BZ    09C4
09BC:  RRCF   02,F
09BE:  RRCF   01,F
09C0:  DECFSZ 00,F
09C2:  BRA    09B2
09C4:  BTFSS  0C.7
09C6:  BRA    09D2
09C8:  COMF   01,F
09CA:  COMF   02,F
09CC:  INCF   01,F
09CE:  BTFSC  FD8.2
09D0:  INCF   02,F
09D2:  GOTO   0A34 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #use delay (clock=48000000) 
*
0A3A:  CLRF   FEA
0A3C:  MOVLW  0A
0A3E:  MOVWF  FE9
0A40:  MOVF   FEF,W
0A42:  BZ    0A60
0A44:  MOVLW  0F
0A46:  MOVWF  01
0A48:  CLRF   00
0A4A:  DECFSZ 00,F
0A4C:  BRA    0A4A
0A4E:  DECFSZ 01,F
0A50:  BRA    0A48
0A52:  MOVLW  8F
0A54:  MOVWF  00
0A56:  DECFSZ 00,F
0A58:  BRA    0A56
0A5A:  NOP   
0A5C:  DECFSZ FEF,F
0A5E:  BRA    0A44
0A60:  GOTO   0A9C (RETURN)
....................   
.................... // 50 cm * (59 ms / 1 cm) * (3uds /2ms) = 4425 
....................  
.................... int captura = 0; 
.................... long v_captura; 
....................  
.................... long calcular_distancia(){ 
....................  
....................     long tiempo; 
....................     output_high(PIN_A4); 
*
09D6:  BCF    F92.4
09D8:  BSF    F89.4
....................     delay_us(10); 
09DA:  MOVLW  27
09DC:  MOVWF  00
09DE:  DECFSZ 00,F
09E0:  BRA    09DE
09E2:  BRA    09E4
....................     output_low(PIN_A4); 
09E4:  BCF    F92.4
09E6:  BCF    F89.4
....................  
....................     //esperar a flanco de subida echo 
....................     while(!PIN_B3){} 
....................     set_timer1(0); 
09E8:  CLRF   FCF
09EA:  CLRF   FCE
....................     //esperar a flanco de bajada echo 
....................     while(PIN_B3){} 
09EC:  BRA    09EC
....................     tiempo = get_timer1(); 
09EE:  MOVF   FCE,W
09F0:  MOVWF  09
09F2:  MOVFF  FCF,0A
....................    led_on(); 
09F6:  BCF    F92.5
09F8:  BSF    F89.5
....................     return tiempo / 117.0; 
09FA:  MOVFF  0A,0C
09FE:  MOVFF  09,0B
0A02:  BRA    0808
0A04:  MOVFF  03,0E
0A08:  MOVFF  02,0D
0A0C:  MOVFF  01,0C
0A10:  MOVFF  00,0B
0A14:  CLRF   12
0A16:  CLRF   11
0A18:  MOVLW  6A
0A1A:  MOVWF  10
0A1C:  MOVLW  85
0A1E:  MOVWF  0F
0A20:  BRA    0840
0A22:  MOVFF  03,0E
0A26:  MOVFF  02,0D
0A2A:  MOVFF  01,0C
0A2E:  MOVFF  00,0B
0A32:  BRA    099C
0A34:  MOVF   02,W
0A36:  GOTO   0A8A (RETURN)
....................  
.................... } 
....................  
.................... void main(){ 
*
0A64:  CLRF   FF8
0A66:  BCF    FD0.7
0A68:  CLRF   04
0A6A:  MOVF   FC1,W
0A6C:  ANDLW  C0
0A6E:  IORLW  0F
0A70:  MOVWF  FC1
0A72:  MOVLW  07
0A74:  MOVWF  FB4
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0A76:  MOVLW  B5
0A78:  MOVWF  FCD
....................    output_low(PIN_A4); 
0A7A:  BCF    F92.4
0A7C:  BCF    F89.4
....................    delay_us(10); 
0A7E:  MOVLW  27
0A80:  MOVWF  00
0A82:  DECFSZ 00,F
0A84:  BRA    0A82
0A86:  BRA    0A88
....................    long distancia; 
....................  
....................    while(1){ 
....................        distancia = calcular_distancia(); 
0A88:  BRA    09D6
0A8A:  MOVFF  02,08
0A8E:  MOVFF  01,07
....................       /* if (distancia <  25){ 
....................            led_on(); 
....................        }*/ 
....................        delay_ms(500); 
0A92:  MOVLW  02
0A94:  MOVWF  09
0A96:  MOVLW  FA
0A98:  MOVWF  0A
0A9A:  BRA    0A3A
0A9C:  DECFSZ 09,F
0A9E:  BRA    0A96
0AA0:  BRA    0A88
....................    } 
....................  
....................  
.................... } 
0AA2:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
