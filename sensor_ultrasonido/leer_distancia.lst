CCS PCH C Compiler, Version 5.008, 5967               17-may.-19 19:00

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\sensor_ultrasonido\leer_distancia.lst

               ROM used:   338 bytes (1%)
                           Largest free fragment is 30378
               RAM used:   25 (1%) at main() level
                           26 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0800:  GOTO   092A
*
0808:  MOVWF  04
080A:  MOVFF  FD8,05
080E:  MOVFF  FE0,06
0812:  MOVLB  0
0814:  MOVFF  FE9,0C
0818:  MOVFF  FEA,07
081C:  MOVFF  FE1,08
0820:  MOVFF  FE2,09
0824:  MOVFF  FD9,0A
0828:  MOVFF  FDA,0B
082C:  MOVFF  FF3,12
0830:  MOVFF  FF4,13
0834:  MOVFF  FFA,14
0838:  MOVFF  00,0E
083C:  MOVFF  01,0F
0840:  MOVFF  02,10
0844:  MOVFF  03,11
0848:  BTFSS  F9D.0
084A:  GOTO   0854
084E:  BTFSC  F9E.0
0850:  GOTO   08A2
0854:  BTFSS  FA0.0
0856:  GOTO   0860
085A:  BTFSC  FA1.0
085C:  GOTO   08B2
0860:  MOVFF  0E,00
0864:  MOVFF  0F,01
0868:  MOVFF  10,02
086C:  MOVFF  11,03
0870:  MOVFF  0C,FE9
0874:  MOVFF  07,FEA
0878:  BSF    07.7
087A:  MOVFF  08,FE1
087E:  MOVFF  09,FE2
0882:  MOVFF  0A,FD9
0886:  MOVFF  0B,FDA
088A:  MOVFF  12,FF3
088E:  MOVFF  13,FF4
0892:  MOVFF  14,FFA
0896:  MOVF   04,W
0898:  MOVFF  06,FE0
089C:  MOVFF  05,FD8
08A0:  RETFIE 0
.................... #include "tarjeta.h" 
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #use delay (clock=48000000) 
*
08E0:  CLRF   FEA
08E2:  MOVLW  19
08E4:  MOVWF  FE9
08E6:  MOVF   FEF,W
08E8:  BZ    0906
08EA:  MOVLW  0F
08EC:  MOVWF  01
08EE:  CLRF   00
08F0:  DECFSZ 00,F
08F2:  BRA    08F0
08F4:  DECFSZ 01,F
08F6:  BRA    08EE
08F8:  MOVLW  8F
08FA:  MOVWF  00
08FC:  DECFSZ 00,F
08FE:  BRA    08FC
0900:  NOP   
0902:  DECFSZ FEF,F
0904:  BRA    08EA
0906:  GOTO   094C (RETURN)
.................... #define INF_16_BIT 65535 
.................... #define SR04_TRIGG PIN_A4 
.................... #define SR04_ECHO PIN_B3 
.................... //#use rs232(baud=9600, bits=8, parity=N,xmit=PIN_C4,rcv=PIN_C5) 
....................   
.................... // 50 cm * (59 ms / 1 cm) * (3uds /2ms) = 4425 
....................  
.................... int captura = 0; 
.................... long v_captura; 
....................  
.................... #INT_TIMER1 
.................... void check_time_out(){ 
....................    disable_interrupts(INT_CCP2); 
*
08A2:  BCF    FA0.0
....................    disable_interrupts(INT_TIMER1);          
08A4:  BCF    F9D.0
....................    v_captura = INF_16_BIT; 
08A6:  SETF   18
08A8:  SETF   17
....................    captura = 0; 
08AA:  CLRF   16
.................... } 
....................  
....................  
08AC:  BCF    F9E.0
08AE:  GOTO   0860
.................... #INT_CCP2 
.................... void capture(){ 
....................    if (captura == 0){ 
08B2:  MOVF   16,F
08B4:  BNZ   08CC
....................       led_on(); 
08B6:  BCF    F92.5
08B8:  BSF    F89.5
....................       set_timer1(0); 
08BA:  CLRF   FCF
08BC:  CLRF   FCE
....................       captura++; 
08BE:  INCF   16,F
....................       enable_interrupts(INT_TIMER1);    
08C0:  BSF    F9D.0
....................       setup_ccp2(CCP_CAPTURE_FE);          
08C2:  BSF    F94.1
08C4:  CLRF   FBA
08C6:  MOVLW  04
08C8:  MOVWF  FBA
....................    } 
08CA:  BRA    08DA
....................    else{ 
....................       v_captura = CCP_2; 
08CC:  MOVFF  FBC,18
08D0:  MOVFF  FBB,17
....................       captura = 0; 
08D4:  CLRF   16
....................       disable_interrupts(INT_CCP2); 
08D6:  BCF    FA0.0
....................       disable_interrupts(INT_TIMER1); 
08D8:  BCF    F9D.0
....................    } 
08DA:  BCF    FA1.0
08DC:  GOTO   0860
.................... } 
....................  
.................... void pulseIn_ECHO_HIGH(){ 
....................    v_captura = 0; 
*
090A:  CLRF   18
090C:  CLRF   17
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
090E:  MOVLW  B5
0910:  MOVWF  FCD
....................    setup_ccp2(CCP_CAPTURE_RE); 
0912:  BSF    F94.1
0914:  CLRF   FBA
0916:  MOVLW  05
0918:  MOVWF  FBA
....................    enable_interrupts(INT_CCP2); 
091A:  BSF    FA0.0
....................    while(v_captura == 0){ 
091C:  MOVF   17,F
091E:  BNZ   0926
0920:  MOVF   18,F
0922:  BNZ   0926
0924:  BRA    091C
....................       //led_on(); 
....................    } 
0926:  GOTO   0952 (RETURN)
....................    //led_on(); 
....................     
.................... } 
....................  
.................... void main(){ 
092A:  CLRF   FF8
092C:  BCF    FD0.7
092E:  BSF    07.7
0930:  CLRF   16
0932:  MOVF   FC1,W
0934:  ANDLW  C0
0936:  IORLW  0F
0938:  MOVWF  FC1
093A:  MOVLW  07
093C:  MOVWF  FB4
....................     
....................    enable_interrupts(GLOBAL); 
093E:  MOVLW  C0
0940:  IORWF  FF2,F
....................     
....................    while(1){ 
....................        
....................       output_high(SR04_TRIGG); 
0942:  BCF    F92.4
0944:  BSF    F89.4
....................       delay_ms(15); 
0946:  MOVLW  0F
0948:  MOVWF  19
094A:  BRA    08E0
....................       output_low(SR04_TRIGG); 
094C:  BCF    F92.4
094E:  BCF    F89.4
....................       pulseIn_ECHO_HIGH();  
0950:  BRA    090A
0952:  BRA    0942
....................    } 
....................  
.................... } 
....................  
0954:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
