CCS PCH C Compiler, Version 5.008, 5967               17-jun.-19 19:10

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\Ultrasonidos_3\main.lst

               ROM used:   1812 bytes (6%)
                           Largest free fragment is 28904
               RAM used:   5 (0%) at main() level
                           12 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0800:  GOTO   0E9A
.................... #include "mismov.h" 
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h" 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
*
0830:  BCF    F92.1
0832:  BSF    F89.1
....................    output_low(PIN_D7); 
0834:  BCF    F95.7
0836:  BCF    F8C.7
....................    output_high(PIN_D6); 
0838:  BCF    F95.6
083A:  BSF    F8C.6
083C:  GOTO   0852 (RETURN)
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0AAA:  BCF    F92.1
0AAC:  BSF    F89.1
....................    output_low(PIN_D7); 
0AAE:  BCF    F95.7
0AB0:  BCF    F8C.7
....................    output_low(PIN_D6); 
0AB2:  BCF    F95.6
0AB4:  BCF    F8C.6
0AB6:  GOTO   0ACC (RETURN)
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
*
0840:  BCF    F92.0
0842:  BSF    F89.0
....................    output_high(PIN_C2); 
0844:  BCF    F94.2
0846:  BSF    F8B.2
....................    output_low(PIN_D5); 
0848:  BCF    F95.5
084A:  BCF    F8C.5
084C:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
*
0ABA:  BCF    F92.0
0ABC:  BSF    F89.0
....................    output_low(PIN_C2); 
0ABE:  BCF    F94.2
0AC0:  BCF    F8B.2
....................    output_low(PIN_D5); 
0AC2:  BCF    F95.5
0AC4:  BCF    F8C.5
0AC6:  GOTO   0ACE (RETURN)
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
*
0B24:  BCF    F92.3
0B26:  BSF    F89.3
....................    output_low(PIN_E2); 
0B28:  BCF    F96.2
0B2A:  BCF    F8D.2
....................    output_high(PIN_E1); 
0B2C:  BCF    F96.1
0B2E:  BSF    F8D.1
0B30:  GOTO   0B36 (RETURN)
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
*
0AD2:  BCF    F92.3
0AD4:  BSF    F89.3
....................    output_high(PIN_E2); 
0AD6:  BCF    F96.2
0AD8:  BSF    F8D.2
....................    output_low(PIN_E1); 
0ADA:  BCF    F96.1
0ADC:  BCF    F8D.1
0ADE:  GOTO   0AE4 (RETURN)
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
*
0B10:  BCF    F92.3
0B12:  BSF    F89.3
....................    output_low(PIN_E2); 
0B14:  BCF    F96.2
0B16:  BCF    F8D.2
....................    output_low(PIN_E1); 
0B18:  BCF    F96.1
0B1A:  BCF    F8D.1
0B1C:  GOTO   0B22 (RETURN)
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
*
0856:  MOVLW  08
0858:  MOVWF  01
085A:  NOP   
085C:  BCF    F8A.1
085E:  BCF    F93.1
0860:  NOP   
0862:  RLCF   0A,F
0864:  BCF    F8A.0
0866:  BTFSC  FD8.0
0868:  BSF    F93.0
086A:  BTFSS  FD8.0
086C:  BCF    F93.0
086E:  BSF    F93.1
0870:  BTFSS  F81.1
0872:  BRA    0870
0874:  DECFSZ 01,F
0876:  BRA    085A
0878:  NOP   
087A:  BCF    F8A.1
087C:  BCF    F93.1
087E:  NOP   
0880:  BSF    F93.0
0882:  NOP   
0884:  NOP   
0886:  BSF    F93.1
0888:  BTFSS  F81.1
088A:  BRA    0888
088C:  CLRF   01
088E:  NOP   
0890:  BTFSC  F81.0
0892:  BSF    01.0
0894:  BCF    F8A.1
0896:  BCF    F93.1
0898:  BCF    F8A.0
089A:  BCF    F93.0
089C:  RETURN 0
*
08C6:  MOVLW  08
08C8:  MOVWF  0B
08CA:  MOVFF  00,0C
08CE:  BSF    F93.0
08D0:  NOP   
08D2:  BSF    F93.1
08D4:  BTFSS  F81.1
08D6:  BRA    08D4
08D8:  BTFSC  F81.0
08DA:  BSF    FD8.0
08DC:  BTFSS  F81.0
08DE:  BCF    FD8.0
08E0:  RLCF   01,F
08E2:  NOP   
08E4:  BCF    F93.1
08E6:  BCF    F8A.1
08E8:  DECFSZ 0B,F
08EA:  BRA    08CE
08EC:  BSF    F93.0
08EE:  NOP   
08F0:  BCF    F8A.0
08F2:  MOVF   0C,W
08F4:  BTFSS  FD8.2
08F6:  BCF    F93.0
08F8:  NOP   
08FA:  BSF    F93.1
08FC:  BTFSS  F81.1
08FE:  BRA    08FC
0900:  NOP   
0902:  BCF    F8A.1
0904:  BCF    F93.1
0906:  NOP   
0908:  BCF    F8A.0
090A:  BCF    F93.0
090C:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include "srf02.h" 
....................  
.................... #ifndef _SRF02_ 
.................... #define _SRF02_ 
....................  
.................... #define SRF02W 0xE0 
.................... #define SRF02WW 0xE0 
.................... #define SRF02WO 0xE2 
.................... #define SRF02WY 0xE4 
.................... #define COMMAND 0 
.................... #define SRF02R 0xE1 
.................... #define SRF02RW 0xE1 
.................... #define SRF02RO 0xE3 
.................... #define SRF02RY 0xE5 
.................... #define MEASUREH 2 
.................... #define MEASUREL 3 
.................... #use delay (clock=48000000) 
*
089E:  CLRF   FEA
08A0:  MOVLW  0A
08A2:  MOVWF  FE9
08A4:  MOVF   FEF,W
08A6:  BZ    08C4
08A8:  MOVLW  0F
08AA:  MOVWF  01
08AC:  CLRF   00
08AE:  DECFSZ 00,F
08B0:  BRA    08AE
08B2:  DECFSZ 01,F
08B4:  BRA    08AC
08B6:  MOVLW  8F
08B8:  MOVWF  00
08BA:  DECFSZ 00,F
08BC:  BRA    08BA
08BE:  NOP   
08C0:  DECFSZ FEF,F
08C2:  BRA    08A8
08C4:  RETURN 0
....................  
.................... unsigned int16 srf_measure_cm_frente(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
090E:  BSF    F93.0
0910:  MOVLW  11
0912:  MOVWF  00
0914:  DECFSZ 00,F
0916:  BRA    0914
0918:  BSF    F93.1
091A:  MOVLW  11
091C:  MOVWF  00
091E:  DECFSZ 00,F
0920:  BRA    091E
0922:  BCF    F8A.0
0924:  BCF    F93.0
0926:  MOVLW  11
0928:  MOVWF  00
092A:  DECFSZ 00,F
092C:  BRA    092A
092E:  BCF    F8A.1
0930:  BCF    F93.1
....................    delay_us(50); 
0932:  MOVLW  C7
0934:  MOVWF  00
0936:  DECFSZ 00,F
0938:  BRA    0936
093A:  BRA    093C
....................    i2c_write(SRF02WW); 
093C:  MOVLW  E0
093E:  MOVWF  0A
0940:  RCALL  0856
....................    delay_us(50); 
0942:  MOVLW  C7
0944:  MOVWF  00
0946:  DECFSZ 00,F
0948:  BRA    0946
094A:  BRA    094C
....................    i2c_write(COMMAND); 
094C:  CLRF   0A
094E:  RCALL  0856
....................    delay_us(50); 
0950:  MOVLW  C7
0952:  MOVWF  00
0954:  DECFSZ 00,F
0956:  BRA    0954
0958:  BRA    095A
....................    i2c_write(0x51); 
095A:  MOVLW  51
095C:  MOVWF  0A
095E:  RCALL  0856
....................    delay_us(50); 
0960:  MOVLW  C7
0962:  MOVWF  00
0964:  DECFSZ 00,F
0966:  BRA    0964
0968:  BRA    096A
....................    i2c_stop(); 
096A:  BCF    F93.0
096C:  NOP   
096E:  BSF    F93.1
0970:  BTFSS  F81.1
0972:  BRA    0970
0974:  MOVLW  11
0976:  MOVWF  00
0978:  DECFSZ 00,F
097A:  BRA    0978
097C:  BRA    097E
097E:  NOP   
0980:  BSF    F93.0
0982:  MOVLW  11
0984:  MOVWF  00
0986:  DECFSZ 00,F
0988:  BRA    0986
....................    delay_ms(80); 
098A:  MOVLW  50
098C:  MOVWF  0A
098E:  RCALL  089E
....................    i2c_start(); 
0990:  BSF    F93.0
0992:  MOVLW  11
0994:  MOVWF  00
0996:  DECFSZ 00,F
0998:  BRA    0996
099A:  BSF    F93.1
099C:  MOVLW  11
099E:  MOVWF  00
09A0:  DECFSZ 00,F
09A2:  BRA    09A0
09A4:  BCF    F8A.0
09A6:  BCF    F93.0
09A8:  MOVLW  11
09AA:  MOVWF  00
09AC:  DECFSZ 00,F
09AE:  BRA    09AC
09B0:  BCF    F8A.1
09B2:  BCF    F93.1
....................    delay_us(50); 
09B4:  MOVLW  C7
09B6:  MOVWF  00
09B8:  DECFSZ 00,F
09BA:  BRA    09B8
09BC:  BRA    09BE
....................    i2c_write(SRF02WW); 
09BE:  MOVLW  E0
09C0:  MOVWF  0A
09C2:  RCALL  0856
....................    delay_us(50); 
09C4:  MOVLW  C7
09C6:  MOVWF  00
09C8:  DECFSZ 00,F
09CA:  BRA    09C8
09CC:  BRA    09CE
....................    i2c_write(MEASUREH); 
09CE:  MOVLW  02
09D0:  MOVWF  0A
09D2:  RCALL  0856
....................    delay_us(50); 
09D4:  MOVLW  C7
09D6:  MOVWF  00
09D8:  DECFSZ 00,F
09DA:  BRA    09D8
09DC:  BRA    09DE
....................    i2c_start(); 
09DE:  BSF    F93.0
09E0:  MOVLW  11
09E2:  MOVWF  00
09E4:  DECFSZ 00,F
09E6:  BRA    09E4
09E8:  BSF    F93.1
09EA:  MOVLW  11
09EC:  MOVWF  00
09EE:  DECFSZ 00,F
09F0:  BRA    09EE
09F2:  BTFSS  F81.1
09F4:  BRA    09F2
09F6:  BCF    F8A.0
09F8:  BCF    F93.0
09FA:  MOVLW  11
09FC:  MOVWF  00
09FE:  DECFSZ 00,F
0A00:  BRA    09FE
0A02:  BCF    F8A.1
0A04:  BCF    F93.1
....................    delay_us(50); 
0A06:  MOVLW  C7
0A08:  MOVWF  00
0A0A:  DECFSZ 00,F
0A0C:  BRA    0A0A
0A0E:  BRA    0A10
....................    i2c_write(SRF02RW); 
0A10:  MOVLW  E1
0A12:  MOVWF  0A
0A14:  RCALL  0856
....................    delay_us(50); 
0A16:  MOVLW  C7
0A18:  MOVWF  00
0A1A:  DECFSZ 00,F
0A1C:  BRA    0A1A
0A1E:  BRA    0A20
....................    m = i2c_read(); 
0A20:  MOVLW  01
0A22:  MOVWF  00
0A24:  RCALL  08C6
0A26:  CLRF   07
0A28:  MOVFF  01,06
....................    delay_us(50); 
0A2C:  MOVLW  C7
0A2E:  MOVWF  00
0A30:  DECFSZ 00,F
0A32:  BRA    0A30
0A34:  BRA    0A36
....................    m2 = i2c_read(0); 
0A36:  CLRF   00
0A38:  RCALL  08C6
0A3A:  CLRF   09
0A3C:  MOVFF  01,08
....................    delay_us(50); 
0A40:  MOVLW  C7
0A42:  MOVWF  00
0A44:  DECFSZ 00,F
0A46:  BRA    0A44
0A48:  BRA    0A4A
....................    i2c_stop(); 
0A4A:  BCF    F93.0
0A4C:  NOP   
0A4E:  BSF    F93.1
0A50:  BTFSS  F81.1
0A52:  BRA    0A50
0A54:  MOVLW  11
0A56:  MOVWF  00
0A58:  DECFSZ 00,F
0A5A:  BRA    0A58
0A5C:  BRA    0A5E
0A5E:  NOP   
0A60:  BSF    F93.0
0A62:  MOVLW  11
0A64:  MOVWF  00
0A66:  DECFSZ 00,F
0A68:  BRA    0A66
....................  
....................    m = (m << 8) | m2; 
0A6A:  MOVFF  06,0B
0A6E:  CLRF   0A
0A70:  MOVF   0A,W
0A72:  IORWF  08,W
0A74:  MOVWF  06
0A76:  MOVF   0B,W
0A78:  IORWF  09,W
0A7A:  MOVWF  07
....................    return m; 
0A7C:  MOVFF  06,01
0A80:  MOVFF  07,02
0A84:  GOTO   0A8A (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_cm_dere(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
0CFC:  BSF    F93.0
0CFE:  MOVLW  11
0D00:  MOVWF  00
0D02:  DECFSZ 00,F
0D04:  BRA    0D02
0D06:  BSF    F93.1
0D08:  MOVLW  11
0D0A:  MOVWF  00
0D0C:  DECFSZ 00,F
0D0E:  BRA    0D0C
0D10:  BCF    F8A.0
0D12:  BCF    F93.0
0D14:  MOVLW  11
0D16:  MOVWF  00
0D18:  DECFSZ 00,F
0D1A:  BRA    0D18
0D1C:  BCF    F8A.1
0D1E:  BCF    F93.1
....................    delay_us(50); 
0D20:  MOVLW  C7
0D22:  MOVWF  00
0D24:  DECFSZ 00,F
0D26:  BRA    0D24
0D28:  BRA    0D2A
....................    i2c_write(SRF02WO); 
0D2A:  MOVLW  E2
0D2C:  MOVWF  0A
0D2E:  RCALL  0856
....................    delay_us(50); 
0D30:  MOVLW  C7
0D32:  MOVWF  00
0D34:  DECFSZ 00,F
0D36:  BRA    0D34
0D38:  BRA    0D3A
....................    i2c_write(COMMAND); 
0D3A:  CLRF   0A
0D3C:  RCALL  0856
....................    delay_us(50); 
0D3E:  MOVLW  C7
0D40:  MOVWF  00
0D42:  DECFSZ 00,F
0D44:  BRA    0D42
0D46:  BRA    0D48
....................    i2c_write(0x51); 
0D48:  MOVLW  51
0D4A:  MOVWF  0A
0D4C:  RCALL  0856
....................    delay_us(50); 
0D4E:  MOVLW  C7
0D50:  MOVWF  00
0D52:  DECFSZ 00,F
0D54:  BRA    0D52
0D56:  BRA    0D58
....................    i2c_stop(); 
0D58:  BCF    F93.0
0D5A:  NOP   
0D5C:  BSF    F93.1
0D5E:  BTFSS  F81.1
0D60:  BRA    0D5E
0D62:  MOVLW  11
0D64:  MOVWF  00
0D66:  DECFSZ 00,F
0D68:  BRA    0D66
0D6A:  BRA    0D6C
0D6C:  NOP   
0D6E:  BSF    F93.0
0D70:  MOVLW  11
0D72:  MOVWF  00
0D74:  DECFSZ 00,F
0D76:  BRA    0D74
....................    delay_ms(80); 
0D78:  MOVLW  50
0D7A:  MOVWF  0A
0D7C:  RCALL  089E
....................    i2c_start(); 
0D7E:  BSF    F93.0
0D80:  MOVLW  11
0D82:  MOVWF  00
0D84:  DECFSZ 00,F
0D86:  BRA    0D84
0D88:  BSF    F93.1
0D8A:  MOVLW  11
0D8C:  MOVWF  00
0D8E:  DECFSZ 00,F
0D90:  BRA    0D8E
0D92:  BCF    F8A.0
0D94:  BCF    F93.0
0D96:  MOVLW  11
0D98:  MOVWF  00
0D9A:  DECFSZ 00,F
0D9C:  BRA    0D9A
0D9E:  BCF    F8A.1
0DA0:  BCF    F93.1
....................    delay_us(50); 
0DA2:  MOVLW  C7
0DA4:  MOVWF  00
0DA6:  DECFSZ 00,F
0DA8:  BRA    0DA6
0DAA:  BRA    0DAC
....................    i2c_write(SRF02WO); 
0DAC:  MOVLW  E2
0DAE:  MOVWF  0A
0DB0:  RCALL  0856
....................    delay_us(50); 
0DB2:  MOVLW  C7
0DB4:  MOVWF  00
0DB6:  DECFSZ 00,F
0DB8:  BRA    0DB6
0DBA:  BRA    0DBC
....................    i2c_write(MEASUREH); 
0DBC:  MOVLW  02
0DBE:  MOVWF  0A
0DC0:  RCALL  0856
....................    delay_us(50); 
0DC2:  MOVLW  C7
0DC4:  MOVWF  00
0DC6:  DECFSZ 00,F
0DC8:  BRA    0DC6
0DCA:  BRA    0DCC
....................    i2c_start(); 
0DCC:  BSF    F93.0
0DCE:  MOVLW  11
0DD0:  MOVWF  00
0DD2:  DECFSZ 00,F
0DD4:  BRA    0DD2
0DD6:  BSF    F93.1
0DD8:  MOVLW  11
0DDA:  MOVWF  00
0DDC:  DECFSZ 00,F
0DDE:  BRA    0DDC
0DE0:  BTFSS  F81.1
0DE2:  BRA    0DE0
0DE4:  BCF    F8A.0
0DE6:  BCF    F93.0
0DE8:  MOVLW  11
0DEA:  MOVWF  00
0DEC:  DECFSZ 00,F
0DEE:  BRA    0DEC
0DF0:  BCF    F8A.1
0DF2:  BCF    F93.1
....................    delay_us(50); 
0DF4:  MOVLW  C7
0DF6:  MOVWF  00
0DF8:  DECFSZ 00,F
0DFA:  BRA    0DF8
0DFC:  BRA    0DFE
....................    i2c_write(SRF02RO); 
0DFE:  MOVLW  E3
0E00:  MOVWF  0A
0E02:  RCALL  0856
....................    delay_us(50); 
0E04:  MOVLW  C7
0E06:  MOVWF  00
0E08:  DECFSZ 00,F
0E0A:  BRA    0E08
0E0C:  BRA    0E0E
....................    m = i2c_read(); 
0E0E:  MOVLW  01
0E10:  MOVWF  00
0E12:  RCALL  08C6
0E14:  CLRF   07
0E16:  MOVFF  01,06
....................    delay_us(50); 
0E1A:  MOVLW  C7
0E1C:  MOVWF  00
0E1E:  DECFSZ 00,F
0E20:  BRA    0E1E
0E22:  BRA    0E24
....................    m2 = i2c_read(0); 
0E24:  CLRF   00
0E26:  RCALL  08C6
0E28:  CLRF   09
0E2A:  MOVFF  01,08
....................    delay_us(50); 
0E2E:  MOVLW  C7
0E30:  MOVWF  00
0E32:  DECFSZ 00,F
0E34:  BRA    0E32
0E36:  BRA    0E38
....................    i2c_stop(); 
0E38:  BCF    F93.0
0E3A:  NOP   
0E3C:  BSF    F93.1
0E3E:  BTFSS  F81.1
0E40:  BRA    0E3E
0E42:  MOVLW  11
0E44:  MOVWF  00
0E46:  DECFSZ 00,F
0E48:  BRA    0E46
0E4A:  BRA    0E4C
0E4C:  NOP   
0E4E:  BSF    F93.0
0E50:  MOVLW  11
0E52:  MOVWF  00
0E54:  DECFSZ 00,F
0E56:  BRA    0E54
....................  
....................    m = (m << 8) | m2; 
0E58:  MOVFF  06,0B
0E5C:  CLRF   0A
0E5E:  MOVF   0A,W
0E60:  IORWF  08,W
0E62:  MOVWF  06
0E64:  MOVF   0B,W
0E66:  IORWF  09,W
0E68:  MOVWF  07
....................    return m; 
0E6A:  MOVFF  06,01
0E6E:  MOVFF  07,02
0E72:  GOTO   0E78 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_cm_izqui(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
0B5E:  BSF    F93.0
0B60:  MOVLW  11
0B62:  MOVWF  00
0B64:  DECFSZ 00,F
0B66:  BRA    0B64
0B68:  BSF    F93.1
0B6A:  MOVLW  11
0B6C:  MOVWF  00
0B6E:  DECFSZ 00,F
0B70:  BRA    0B6E
0B72:  BCF    F8A.0
0B74:  BCF    F93.0
0B76:  MOVLW  11
0B78:  MOVWF  00
0B7A:  DECFSZ 00,F
0B7C:  BRA    0B7A
0B7E:  BCF    F8A.1
0B80:  BCF    F93.1
....................    delay_us(50); 
0B82:  MOVLW  C7
0B84:  MOVWF  00
0B86:  DECFSZ 00,F
0B88:  BRA    0B86
0B8A:  BRA    0B8C
....................    i2c_write(SRF02WY); 
0B8C:  MOVLW  E4
0B8E:  MOVWF  0A
0B90:  RCALL  0856
....................    delay_us(50); 
0B92:  MOVLW  C7
0B94:  MOVWF  00
0B96:  DECFSZ 00,F
0B98:  BRA    0B96
0B9A:  BRA    0B9C
....................    i2c_write(COMMAND); 
0B9C:  CLRF   0A
0B9E:  RCALL  0856
....................    delay_us(50); 
0BA0:  MOVLW  C7
0BA2:  MOVWF  00
0BA4:  DECFSZ 00,F
0BA6:  BRA    0BA4
0BA8:  BRA    0BAA
....................    i2c_write(0x51); 
0BAA:  MOVLW  51
0BAC:  MOVWF  0A
0BAE:  RCALL  0856
....................    delay_us(50); 
0BB0:  MOVLW  C7
0BB2:  MOVWF  00
0BB4:  DECFSZ 00,F
0BB6:  BRA    0BB4
0BB8:  BRA    0BBA
....................    i2c_stop(); 
0BBA:  BCF    F93.0
0BBC:  NOP   
0BBE:  BSF    F93.1
0BC0:  BTFSS  F81.1
0BC2:  BRA    0BC0
0BC4:  MOVLW  11
0BC6:  MOVWF  00
0BC8:  DECFSZ 00,F
0BCA:  BRA    0BC8
0BCC:  BRA    0BCE
0BCE:  NOP   
0BD0:  BSF    F93.0
0BD2:  MOVLW  11
0BD4:  MOVWF  00
0BD6:  DECFSZ 00,F
0BD8:  BRA    0BD6
....................    delay_ms(80); 
0BDA:  MOVLW  50
0BDC:  MOVWF  0A
0BDE:  RCALL  089E
....................    i2c_start(); 
0BE0:  BSF    F93.0
0BE2:  MOVLW  11
0BE4:  MOVWF  00
0BE6:  DECFSZ 00,F
0BE8:  BRA    0BE6
0BEA:  BSF    F93.1
0BEC:  MOVLW  11
0BEE:  MOVWF  00
0BF0:  DECFSZ 00,F
0BF2:  BRA    0BF0
0BF4:  BCF    F8A.0
0BF6:  BCF    F93.0
0BF8:  MOVLW  11
0BFA:  MOVWF  00
0BFC:  DECFSZ 00,F
0BFE:  BRA    0BFC
0C00:  BCF    F8A.1
0C02:  BCF    F93.1
....................    delay_us(50); 
0C04:  MOVLW  C7
0C06:  MOVWF  00
0C08:  DECFSZ 00,F
0C0A:  BRA    0C08
0C0C:  BRA    0C0E
....................    i2c_write(SRF02WY); 
0C0E:  MOVLW  E4
0C10:  MOVWF  0A
0C12:  RCALL  0856
....................    delay_us(50); 
0C14:  MOVLW  C7
0C16:  MOVWF  00
0C18:  DECFSZ 00,F
0C1A:  BRA    0C18
0C1C:  BRA    0C1E
....................    i2c_write(MEASUREH); 
0C1E:  MOVLW  02
0C20:  MOVWF  0A
0C22:  RCALL  0856
....................    delay_us(50); 
0C24:  MOVLW  C7
0C26:  MOVWF  00
0C28:  DECFSZ 00,F
0C2A:  BRA    0C28
0C2C:  BRA    0C2E
....................    i2c_start(); 
0C2E:  BSF    F93.0
0C30:  MOVLW  11
0C32:  MOVWF  00
0C34:  DECFSZ 00,F
0C36:  BRA    0C34
0C38:  BSF    F93.1
0C3A:  MOVLW  11
0C3C:  MOVWF  00
0C3E:  DECFSZ 00,F
0C40:  BRA    0C3E
0C42:  BTFSS  F81.1
0C44:  BRA    0C42
0C46:  BCF    F8A.0
0C48:  BCF    F93.0
0C4A:  MOVLW  11
0C4C:  MOVWF  00
0C4E:  DECFSZ 00,F
0C50:  BRA    0C4E
0C52:  BCF    F8A.1
0C54:  BCF    F93.1
....................    delay_us(50); 
0C56:  MOVLW  C7
0C58:  MOVWF  00
0C5A:  DECFSZ 00,F
0C5C:  BRA    0C5A
0C5E:  BRA    0C60
....................    i2c_write(SRF02RY); 
0C60:  MOVLW  E5
0C62:  MOVWF  0A
0C64:  RCALL  0856
....................    delay_us(50); 
0C66:  MOVLW  C7
0C68:  MOVWF  00
0C6A:  DECFSZ 00,F
0C6C:  BRA    0C6A
0C6E:  BRA    0C70
....................    m = i2c_read(); 
0C70:  MOVLW  01
0C72:  MOVWF  00
0C74:  RCALL  08C6
0C76:  CLRF   07
0C78:  MOVFF  01,06
....................    delay_us(50); 
0C7C:  MOVLW  C7
0C7E:  MOVWF  00
0C80:  DECFSZ 00,F
0C82:  BRA    0C80
0C84:  BRA    0C86
....................    m2 = i2c_read(0); 
0C86:  CLRF   00
0C88:  RCALL  08C6
0C8A:  CLRF   09
0C8C:  MOVFF  01,08
....................    delay_us(50); 
0C90:  MOVLW  C7
0C92:  MOVWF  00
0C94:  DECFSZ 00,F
0C96:  BRA    0C94
0C98:  BRA    0C9A
....................    i2c_stop(); 
0C9A:  BCF    F93.0
0C9C:  NOP   
0C9E:  BSF    F93.1
0CA0:  BTFSS  F81.1
0CA2:  BRA    0CA0
0CA4:  MOVLW  11
0CA6:  MOVWF  00
0CA8:  DECFSZ 00,F
0CAA:  BRA    0CA8
0CAC:  BRA    0CAE
0CAE:  NOP   
0CB0:  BSF    F93.0
0CB2:  MOVLW  11
0CB4:  MOVWF  00
0CB6:  DECFSZ 00,F
0CB8:  BRA    0CB6
....................  
....................    m = (m << 8) | m2; 
0CBA:  MOVFF  06,0B
0CBE:  CLRF   0A
0CC0:  MOVF   0A,W
0CC2:  IORWF  08,W
0CC4:  MOVWF  06
0CC6:  MOVF   0B,W
0CC8:  IORWF  09,W
0CCA:  MOVWF  07
....................    return m; 
0CCC:  MOVFF  06,01
0CD0:  MOVFF  07,02
0CD4:  GOTO   0CDA (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x50); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x52); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x57); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x56); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x58); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... void srf_burst(){ 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x5C); 
....................    delay_us(50); 
....................    i2c_stop(); 
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0AE8:  CLRF   FEA
0AEA:  MOVLW  05
0AEC:  MOVWF  FE9
0AEE:  MOVF   FEF,W
0AF0:  BZ    0B0E
0AF2:  MOVLW  0F
0AF4:  MOVWF  01
0AF6:  CLRF   00
0AF8:  DECFSZ 00,F
0AFA:  BRA    0AF8
0AFC:  DECFSZ 01,F
0AFE:  BRA    0AF6
0B00:  MOVLW  8F
0B02:  MOVWF  00
0B04:  DECFSZ 00,F
0B06:  BRA    0B04
0B08:  NOP   
0B0A:  DECFSZ FEF,F
0B0C:  BRA    0AF2
0B0E:  RETURN 0
....................  
.................... void DELANTE(){ 
....................    M1_H(); 
*
0850:  BRA    0830
....................    M2_A(); 
0852:  BRA    0840
0854:  RETURN 0
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_A(); 
....................    M2_H(); 
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
*
0ACA:  BRA    0AAA
....................    M2_P(); 
0ACC:  BRA    0ABA
0ACE:  GOTO   0ECE (RETURN)
.................... } 
....................  
.................... void PARAR_I(){ 
....................    M4_P(); 
*
0B20:  BRA    0B10
0B22:  RETURN 0
.................... } 
....................  
.................... void DISPARAR(){ 
....................    M4_H(); 
*
0AE2:  BRA    0AD2
0AE4:  GOTO   0B3C (RETURN)
.................... } 
....................  
.................... void RECOGER(){ 
....................    M4_A(); 
*
0B34:  BRA    0B24
0B36:  GOTO   0B4C (RETURN)
.................... } 
....................  
.................... void IMPACTO(){ 
....................    DISPARAR(); 
0B3A:  BRA    0AE2
....................    delay_ms(50); 
0B3C:  MOVLW  32
0B3E:  MOVWF  05
0B40:  RCALL  0AE8
....................    PARAR_I(); 
0B42:  RCALL  0B20
....................    delay_ms(50); 
0B44:  MOVLW  32
0B46:  MOVWF  05
0B48:  RCALL  0AE8
....................    RECOGER(); 
0B4A:  BRA    0B34
....................    delay_ms(50); 
0B4C:  MOVLW  32
0B4E:  MOVWF  05
0B50:  RCALL  0AE8
....................    PARAR_I(); 
0B52:  RCALL  0B20
....................    delay_ms(50); 
0B54:  MOVLW  32
0B56:  MOVWF  05
0B58:  RCALL  0AE8
0B5A:  GOTO   0EEA (RETURN)
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_P(); 
....................    M2_A(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_A(); 
....................    M2_P(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... int ULTRA_SONIDOS_FRENTE(int dist){ 
....................    //delay_ms(1); 
....................    if(srf_measure_cm_frente() < dist)  
*
0A88:  BRA    090E
0A8A:  MOVFF  02,07
0A8E:  MOVFF  01,06
0A92:  MOVF   07,F
0A94:  BNZ   0AA4
0A96:  MOVF   05,W
0A98:  SUBWF  06,W
0A9A:  BC    0AA4
....................       return 1; 
0A9C:  MOVLW  01
0A9E:  MOVWF  01
0AA0:  BRA    0AA8
0AA2:  BRA    0AA8
....................    else 
....................       return 0; 
0AA4:  MOVLW  00
0AA6:  MOVWF  01
0AA8:  RETURN 0
.................... } 
....................  
.................... int ULTRA_SONIDOS_DERE(int dist){ 
....................    //delay_ms(1); 
....................    if(srf_measure_cm_dere() < dist)  
*
0E76:  BRA    0CFC
0E78:  MOVFF  02,07
0E7C:  MOVFF  01,06
0E80:  MOVF   07,F
0E82:  BNZ   0E92
0E84:  MOVF   05,W
0E86:  SUBWF  06,W
0E88:  BC    0E92
....................       return 1; 
0E8A:  MOVLW  01
0E8C:  MOVWF  01
0E8E:  BRA    0E96
0E90:  BRA    0E96
....................    else 
....................       return 0; 
0E92:  MOVLW  00
0E94:  MOVWF  01
0E96:  GOTO   0F06 (RETURN)
.................... } 
....................  
....................  
.................... int ULTRA_SONIDOS_IZQUI(int dist){ 
....................    //delay_ms(1); 
....................    if(srf_measure_cm_izqui() < dist)  
*
0CD8:  BRA    0B5E
0CDA:  MOVFF  02,07
0CDE:  MOVFF  01,06
0CE2:  MOVF   07,F
0CE4:  BNZ   0CF4
0CE6:  MOVF   05,W
0CE8:  SUBWF  06,W
0CEA:  BC    0CF4
....................       return 1; 
0CEC:  MOVLW  01
0CEE:  MOVWF  01
0CF0:  BRA    0CF8
0CF2:  BRA    0CF8
....................    else 
....................       return 0; 
0CF4:  MOVLW  00
0CF6:  MOVWF  01
0CF8:  GOTO   0EF4 (RETURN)
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
....................  
.................... void main() { 
*
0E9A:  CLRF   FF8
0E9C:  BCF    FD0.7
0E9E:  MOVF   FC1,W
0EA0:  ANDLW  C0
0EA2:  IORLW  0F
0EA4:  MOVWF  FC1
0EA6:  MOVLW  07
0EA8:  MOVWF  FB4
....................    led_on(); 
0EAA:  BCF    F92.5
0EAC:  BSF    F89.5
....................    delay_ms(3000); 
0EAE:  MOVLW  0C
0EB0:  MOVWF  05
0EB2:  MOVLW  FA
0EB4:  MOVWF  06
0EB6:  RCALL  0808
0EB8:  DECFSZ 05,F
0EBA:  BRA    0EB2
....................    DELANTE(); 
0EBC:  RCALL  0850
....................    led_off(); 
0EBE:  BCF    F92.5
0EC0:  BCF    F89.5
....................    while(1){ 
....................       if(ULTRA_SONIDOS_FRENTE(100)){ 
0EC2:  MOVLW  64
0EC4:  MOVWF  05
0EC6:  RCALL  0A88
0EC8:  MOVF   01,F
0ECA:  BZ    0EDE
....................          PARAR(); 
0ECC:  BRA    0ACA
....................          //led_on(); 
....................          delay_ms(2000); 
0ECE:  MOVLW  08
0ED0:  MOVWF  05
0ED2:  MOVLW  FA
0ED4:  MOVWF  06
0ED6:  RCALL  0808
0ED8:  DECFSZ 05,F
0EDA:  BRA    0ED2
....................          //DERECHA(600); 
....................       } 
0EDC:  BRA    0F14
....................       else if(ULTRA_SONIDOS_FRENTE(250)){ 
0EDE:  MOVLW  FA
0EE0:  MOVWF  05
0EE2:  RCALL  0A88
0EE4:  MOVF   01,F
0EE6:  BZ    0EEE
....................          IMPACTO(); 
0EE8:  BRA    0B3A
....................          DELANTE(); 
0EEA:  RCALL  0850
....................       } 
0EEC:  BRA    0F14
....................       else if(ULTRA_SONIDOS_IZQUI(30)){ 
0EEE:  MOVLW  1E
0EF0:  MOVWF  05
0EF2:  BRA    0CD8
0EF4:  MOVF   01,F
0EF6:  BZ    0F00
....................          led_on(); 
0EF8:  BCF    F92.5
0EFA:  BSF    F89.5
....................          DELANTE(); 
0EFC:  RCALL  0850
....................       } 
0EFE:  BRA    0F14
....................       else if(ULTRA_SONIDOS_DERE(30)){ 
0F00:  MOVLW  1E
0F02:  MOVWF  05
0F04:  BRA    0E76
0F06:  MOVF   01,F
0F08:  BZ    0F12
....................          led_on(); 
0F0A:  BCF    F92.5
0F0C:  BSF    F89.5
....................          DELANTE(); 
0F0E:  RCALL  0850
....................       } 
0F10:  BRA    0F14
....................       else 
....................          DELANTE(); 
0F12:  RCALL  0850
0F14:  BRA    0EC2
....................    } 
.................... } 
0F16:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
