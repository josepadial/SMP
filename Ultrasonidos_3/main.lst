CCS PCH C Compiler, Version 5.008, 5967               16-jun.-19 22:52

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\Ultrasonidos_3\main.lst

               ROM used:   1712 bytes (5%)
                           Largest free fragment is 29004
               RAM used:   5 (0%) at main() level
                           12 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0800:  GOTO   0E4A
.................... #include "mismov.h" 
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h" 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
*
0830:  BCF    F92.1
0832:  BSF    F89.1
....................    output_low(PIN_D7); 
0834:  BCF    F95.7
0836:  BCF    F8C.7
....................    output_high(PIN_D6); 
0838:  BCF    F95.6
083A:  BSF    F8C.6
083C:  GOTO   0852 (RETURN)
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0C7E:  BCF    F92.1
0C80:  BSF    F89.1
....................    output_low(PIN_D7); 
0C82:  BCF    F95.7
0C84:  BCF    F8C.7
....................    output_low(PIN_D6); 
0C86:  BCF    F95.6
0C88:  BCF    F8C.6
0C8A:  GOTO   0CA0 (RETURN)
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
*
0840:  BCF    F92.0
0842:  BSF    F89.0
....................    output_high(PIN_C2); 
0844:  BCF    F94.2
0846:  BSF    F8B.2
....................    output_low(PIN_D5); 
0848:  BCF    F95.5
084A:  BCF    F8C.5
084C:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
*
0C8E:  BCF    F92.0
0C90:  BSF    F89.0
....................    output_low(PIN_C2); 
0C92:  BCF    F94.2
0C94:  BCF    F8B.2
....................    output_low(PIN_D5); 
0C96:  BCF    F95.5
0C98:  BCF    F8C.5
0C9A:  GOTO   0CA2 (RETURN)
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
*
087E:  MOVLW  08
0880:  MOVWF  01
0882:  NOP   
0884:  BCF    F8A.1
0886:  BCF    F93.1
0888:  NOP   
088A:  RLCF   0A,F
088C:  BCF    F8A.0
088E:  BTFSC  FD8.0
0890:  BSF    F93.0
0892:  BTFSS  FD8.0
0894:  BCF    F93.0
0896:  BSF    F93.1
0898:  BTFSS  F81.1
089A:  BRA    0898
089C:  DECFSZ 01,F
089E:  BRA    0882
08A0:  NOP   
08A2:  BCF    F8A.1
08A4:  BCF    F93.1
08A6:  NOP   
08A8:  BSF    F93.0
08AA:  NOP   
08AC:  NOP   
08AE:  BSF    F93.1
08B0:  BTFSS  F81.1
08B2:  BRA    08B0
08B4:  CLRF   01
08B6:  NOP   
08B8:  BTFSC  F81.0
08BA:  BSF    01.0
08BC:  BCF    F8A.1
08BE:  BCF    F93.1
08C0:  BCF    F8A.0
08C2:  BCF    F93.0
08C4:  RETURN 0
*
08EE:  MOVLW  08
08F0:  MOVWF  0B
08F2:  MOVFF  00,0C
08F6:  BSF    F93.0
08F8:  NOP   
08FA:  BSF    F93.1
08FC:  BTFSS  F81.1
08FE:  BRA    08FC
0900:  BTFSC  F81.0
0902:  BSF    FD8.0
0904:  BTFSS  F81.0
0906:  BCF    FD8.0
0908:  RLCF   01,F
090A:  NOP   
090C:  BCF    F93.1
090E:  BCF    F8A.1
0910:  DECFSZ 0B,F
0912:  BRA    08F6
0914:  BSF    F93.0
0916:  NOP   
0918:  BCF    F8A.0
091A:  MOVF   0C,W
091C:  BTFSS  FD8.2
091E:  BCF    F93.0
0920:  NOP   
0922:  BSF    F93.1
0924:  BTFSS  F81.1
0926:  BRA    0924
0928:  NOP   
092A:  BCF    F8A.1
092C:  BCF    F93.1
092E:  NOP   
0930:  BCF    F8A.0
0932:  BCF    F93.0
0934:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include "srf02.h" 
....................  
.................... #ifndef _SRF02_ 
.................... #define _SRF02_ 
....................  
.................... #define SRF02W 0xE0 
.................... #define SRF02WW 0xE0 
.................... #define SRF02WO 0xE2 
.................... #define SRF02WY 0xE4 
.................... #define COMMAND 0 
.................... #define SRF02R 0xE1 
.................... #define SRF02RW 0xE1 
.................... #define SRF02RO 0xE3 
.................... #define SRF02RY 0xE5 
.................... #define MEASUREH 2 
.................... #define MEASUREL 3 
.................... #use delay (clock=48000000) 
*
08C6:  CLRF   FEA
08C8:  MOVLW  0A
08CA:  MOVWF  FE9
08CC:  MOVF   FEF,W
08CE:  BZ    08EC
08D0:  MOVLW  0F
08D2:  MOVWF  01
08D4:  CLRF   00
08D6:  DECFSZ 00,F
08D8:  BRA    08D6
08DA:  DECFSZ 01,F
08DC:  BRA    08D4
08DE:  MOVLW  8F
08E0:  MOVWF  00
08E2:  DECFSZ 00,F
08E4:  BRA    08E2
08E6:  NOP   
08E8:  DECFSZ FEF,F
08EA:  BRA    08D0
08EC:  RETURN 0
....................  
.................... unsigned int16 srf_measure_cm_frente(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
0ADA:  BSF    F93.0
0ADC:  MOVLW  11
0ADE:  MOVWF  00
0AE0:  DECFSZ 00,F
0AE2:  BRA    0AE0
0AE4:  BSF    F93.1
0AE6:  MOVLW  11
0AE8:  MOVWF  00
0AEA:  DECFSZ 00,F
0AEC:  BRA    0AEA
0AEE:  BCF    F8A.0
0AF0:  BCF    F93.0
0AF2:  MOVLW  11
0AF4:  MOVWF  00
0AF6:  DECFSZ 00,F
0AF8:  BRA    0AF6
0AFA:  BCF    F8A.1
0AFC:  BCF    F93.1
....................    delay_us(50); 
0AFE:  MOVLW  C7
0B00:  MOVWF  00
0B02:  DECFSZ 00,F
0B04:  BRA    0B02
0B06:  BRA    0B08
....................    i2c_write(SRF02WW); 
0B08:  MOVLW  E0
0B0A:  MOVWF  0A
0B0C:  RCALL  087E
....................    delay_us(50); 
0B0E:  MOVLW  C7
0B10:  MOVWF  00
0B12:  DECFSZ 00,F
0B14:  BRA    0B12
0B16:  BRA    0B18
....................    i2c_write(COMMAND); 
0B18:  CLRF   0A
0B1A:  RCALL  087E
....................    delay_us(50); 
0B1C:  MOVLW  C7
0B1E:  MOVWF  00
0B20:  DECFSZ 00,F
0B22:  BRA    0B20
0B24:  BRA    0B26
....................    i2c_write(0x51); 
0B26:  MOVLW  51
0B28:  MOVWF  0A
0B2A:  RCALL  087E
....................    delay_us(50); 
0B2C:  MOVLW  C7
0B2E:  MOVWF  00
0B30:  DECFSZ 00,F
0B32:  BRA    0B30
0B34:  BRA    0B36
....................    i2c_stop(); 
0B36:  BCF    F93.0
0B38:  NOP   
0B3A:  BSF    F93.1
0B3C:  BTFSS  F81.1
0B3E:  BRA    0B3C
0B40:  MOVLW  11
0B42:  MOVWF  00
0B44:  DECFSZ 00,F
0B46:  BRA    0B44
0B48:  BRA    0B4A
0B4A:  NOP   
0B4C:  BSF    F93.0
0B4E:  MOVLW  11
0B50:  MOVWF  00
0B52:  DECFSZ 00,F
0B54:  BRA    0B52
....................    delay_ms(80); 
0B56:  MOVLW  50
0B58:  MOVWF  0A
0B5A:  RCALL  08C6
....................    i2c_start(); 
0B5C:  BSF    F93.0
0B5E:  MOVLW  11
0B60:  MOVWF  00
0B62:  DECFSZ 00,F
0B64:  BRA    0B62
0B66:  BSF    F93.1
0B68:  MOVLW  11
0B6A:  MOVWF  00
0B6C:  DECFSZ 00,F
0B6E:  BRA    0B6C
0B70:  BCF    F8A.0
0B72:  BCF    F93.0
0B74:  MOVLW  11
0B76:  MOVWF  00
0B78:  DECFSZ 00,F
0B7A:  BRA    0B78
0B7C:  BCF    F8A.1
0B7E:  BCF    F93.1
....................    delay_us(50); 
0B80:  MOVLW  C7
0B82:  MOVWF  00
0B84:  DECFSZ 00,F
0B86:  BRA    0B84
0B88:  BRA    0B8A
....................    i2c_write(SRF02WW); 
0B8A:  MOVLW  E0
0B8C:  MOVWF  0A
0B8E:  RCALL  087E
....................    delay_us(50); 
0B90:  MOVLW  C7
0B92:  MOVWF  00
0B94:  DECFSZ 00,F
0B96:  BRA    0B94
0B98:  BRA    0B9A
....................    i2c_write(MEASUREH); 
0B9A:  MOVLW  02
0B9C:  MOVWF  0A
0B9E:  RCALL  087E
....................    delay_us(50); 
0BA0:  MOVLW  C7
0BA2:  MOVWF  00
0BA4:  DECFSZ 00,F
0BA6:  BRA    0BA4
0BA8:  BRA    0BAA
....................    i2c_start(); 
0BAA:  BSF    F93.0
0BAC:  MOVLW  11
0BAE:  MOVWF  00
0BB0:  DECFSZ 00,F
0BB2:  BRA    0BB0
0BB4:  BSF    F93.1
0BB6:  MOVLW  11
0BB8:  MOVWF  00
0BBA:  DECFSZ 00,F
0BBC:  BRA    0BBA
0BBE:  BTFSS  F81.1
0BC0:  BRA    0BBE
0BC2:  BCF    F8A.0
0BC4:  BCF    F93.0
0BC6:  MOVLW  11
0BC8:  MOVWF  00
0BCA:  DECFSZ 00,F
0BCC:  BRA    0BCA
0BCE:  BCF    F8A.1
0BD0:  BCF    F93.1
....................    delay_us(50); 
0BD2:  MOVLW  C7
0BD4:  MOVWF  00
0BD6:  DECFSZ 00,F
0BD8:  BRA    0BD6
0BDA:  BRA    0BDC
....................    i2c_write(SRF02RW); 
0BDC:  MOVLW  E1
0BDE:  MOVWF  0A
0BE0:  RCALL  087E
....................    delay_us(50); 
0BE2:  MOVLW  C7
0BE4:  MOVWF  00
0BE6:  DECFSZ 00,F
0BE8:  BRA    0BE6
0BEA:  BRA    0BEC
....................    m = i2c_read(); 
0BEC:  MOVLW  01
0BEE:  MOVWF  00
0BF0:  RCALL  08EE
0BF2:  CLRF   07
0BF4:  MOVFF  01,06
....................    delay_us(50); 
0BF8:  MOVLW  C7
0BFA:  MOVWF  00
0BFC:  DECFSZ 00,F
0BFE:  BRA    0BFC
0C00:  BRA    0C02
....................    m2 = i2c_read(0); 
0C02:  CLRF   00
0C04:  RCALL  08EE
0C06:  CLRF   09
0C08:  MOVFF  01,08
....................    delay_us(50); 
0C0C:  MOVLW  C7
0C0E:  MOVWF  00
0C10:  DECFSZ 00,F
0C12:  BRA    0C10
0C14:  BRA    0C16
....................    i2c_stop(); 
0C16:  BCF    F93.0
0C18:  NOP   
0C1A:  BSF    F93.1
0C1C:  BTFSS  F81.1
0C1E:  BRA    0C1C
0C20:  MOVLW  11
0C22:  MOVWF  00
0C24:  DECFSZ 00,F
0C26:  BRA    0C24
0C28:  BRA    0C2A
0C2A:  NOP   
0C2C:  BSF    F93.0
0C2E:  MOVLW  11
0C30:  MOVWF  00
0C32:  DECFSZ 00,F
0C34:  BRA    0C32
....................  
....................    m = (m << 8) | m2; 
0C36:  MOVFF  06,0B
0C3A:  CLRF   0A
0C3C:  MOVF   0A,W
0C3E:  IORWF  08,W
0C40:  MOVWF  06
0C42:  MOVF   0B,W
0C44:  IORWF  09,W
0C46:  MOVWF  07
....................    return m; 
0C48:  MOVFF  06,01
0C4C:  MOVFF  07,02
0C50:  GOTO   0C5C (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_cm_dere(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
0CA6:  BSF    F93.0
0CA8:  MOVLW  11
0CAA:  MOVWF  00
0CAC:  DECFSZ 00,F
0CAE:  BRA    0CAC
0CB0:  BSF    F93.1
0CB2:  MOVLW  11
0CB4:  MOVWF  00
0CB6:  DECFSZ 00,F
0CB8:  BRA    0CB6
0CBA:  BCF    F8A.0
0CBC:  BCF    F93.0
0CBE:  MOVLW  11
0CC0:  MOVWF  00
0CC2:  DECFSZ 00,F
0CC4:  BRA    0CC2
0CC6:  BCF    F8A.1
0CC8:  BCF    F93.1
....................    delay_us(50); 
0CCA:  MOVLW  C7
0CCC:  MOVWF  00
0CCE:  DECFSZ 00,F
0CD0:  BRA    0CCE
0CD2:  BRA    0CD4
....................    i2c_write(SRF02WO); 
0CD4:  MOVLW  E2
0CD6:  MOVWF  0A
0CD8:  RCALL  087E
....................    delay_us(50); 
0CDA:  MOVLW  C7
0CDC:  MOVWF  00
0CDE:  DECFSZ 00,F
0CE0:  BRA    0CDE
0CE2:  BRA    0CE4
....................    i2c_write(COMMAND); 
0CE4:  CLRF   0A
0CE6:  RCALL  087E
....................    delay_us(50); 
0CE8:  MOVLW  C7
0CEA:  MOVWF  00
0CEC:  DECFSZ 00,F
0CEE:  BRA    0CEC
0CF0:  BRA    0CF2
....................    i2c_write(0x51); 
0CF2:  MOVLW  51
0CF4:  MOVWF  0A
0CF6:  RCALL  087E
....................    delay_us(50); 
0CF8:  MOVLW  C7
0CFA:  MOVWF  00
0CFC:  DECFSZ 00,F
0CFE:  BRA    0CFC
0D00:  BRA    0D02
....................    i2c_stop(); 
0D02:  BCF    F93.0
0D04:  NOP   
0D06:  BSF    F93.1
0D08:  BTFSS  F81.1
0D0A:  BRA    0D08
0D0C:  MOVLW  11
0D0E:  MOVWF  00
0D10:  DECFSZ 00,F
0D12:  BRA    0D10
0D14:  BRA    0D16
0D16:  NOP   
0D18:  BSF    F93.0
0D1A:  MOVLW  11
0D1C:  MOVWF  00
0D1E:  DECFSZ 00,F
0D20:  BRA    0D1E
....................    delay_ms(80); 
0D22:  MOVLW  50
0D24:  MOVWF  0A
0D26:  RCALL  08C6
....................    i2c_start(); 
0D28:  BSF    F93.0
0D2A:  MOVLW  11
0D2C:  MOVWF  00
0D2E:  DECFSZ 00,F
0D30:  BRA    0D2E
0D32:  BSF    F93.1
0D34:  MOVLW  11
0D36:  MOVWF  00
0D38:  DECFSZ 00,F
0D3A:  BRA    0D38
0D3C:  BCF    F8A.0
0D3E:  BCF    F93.0
0D40:  MOVLW  11
0D42:  MOVWF  00
0D44:  DECFSZ 00,F
0D46:  BRA    0D44
0D48:  BCF    F8A.1
0D4A:  BCF    F93.1
....................    delay_us(50); 
0D4C:  MOVLW  C7
0D4E:  MOVWF  00
0D50:  DECFSZ 00,F
0D52:  BRA    0D50
0D54:  BRA    0D56
....................    i2c_write(SRF02WO); 
0D56:  MOVLW  E2
0D58:  MOVWF  0A
0D5A:  RCALL  087E
....................    delay_us(50); 
0D5C:  MOVLW  C7
0D5E:  MOVWF  00
0D60:  DECFSZ 00,F
0D62:  BRA    0D60
0D64:  BRA    0D66
....................    i2c_write(MEASUREH); 
0D66:  MOVLW  02
0D68:  MOVWF  0A
0D6A:  RCALL  087E
....................    delay_us(50); 
0D6C:  MOVLW  C7
0D6E:  MOVWF  00
0D70:  DECFSZ 00,F
0D72:  BRA    0D70
0D74:  BRA    0D76
....................    i2c_start(); 
0D76:  BSF    F93.0
0D78:  MOVLW  11
0D7A:  MOVWF  00
0D7C:  DECFSZ 00,F
0D7E:  BRA    0D7C
0D80:  BSF    F93.1
0D82:  MOVLW  11
0D84:  MOVWF  00
0D86:  DECFSZ 00,F
0D88:  BRA    0D86
0D8A:  BTFSS  F81.1
0D8C:  BRA    0D8A
0D8E:  BCF    F8A.0
0D90:  BCF    F93.0
0D92:  MOVLW  11
0D94:  MOVWF  00
0D96:  DECFSZ 00,F
0D98:  BRA    0D96
0D9A:  BCF    F8A.1
0D9C:  BCF    F93.1
....................    delay_us(50); 
0D9E:  MOVLW  C7
0DA0:  MOVWF  00
0DA2:  DECFSZ 00,F
0DA4:  BRA    0DA2
0DA6:  BRA    0DA8
....................    i2c_write(SRF02RO); 
0DA8:  MOVLW  E3
0DAA:  MOVWF  0A
0DAC:  RCALL  087E
....................    delay_us(50); 
0DAE:  MOVLW  C7
0DB0:  MOVWF  00
0DB2:  DECFSZ 00,F
0DB4:  BRA    0DB2
0DB6:  BRA    0DB8
....................    m = i2c_read(); 
0DB8:  MOVLW  01
0DBA:  MOVWF  00
0DBC:  RCALL  08EE
0DBE:  CLRF   07
0DC0:  MOVFF  01,06
....................    delay_us(50); 
0DC4:  MOVLW  C7
0DC6:  MOVWF  00
0DC8:  DECFSZ 00,F
0DCA:  BRA    0DC8
0DCC:  BRA    0DCE
....................    m2 = i2c_read(0); 
0DCE:  CLRF   00
0DD0:  RCALL  08EE
0DD2:  CLRF   09
0DD4:  MOVFF  01,08
....................    delay_us(50); 
0DD8:  MOVLW  C7
0DDA:  MOVWF  00
0DDC:  DECFSZ 00,F
0DDE:  BRA    0DDC
0DE0:  BRA    0DE2
....................    i2c_stop(); 
0DE2:  BCF    F93.0
0DE4:  NOP   
0DE6:  BSF    F93.1
0DE8:  BTFSS  F81.1
0DEA:  BRA    0DE8
0DEC:  MOVLW  11
0DEE:  MOVWF  00
0DF0:  DECFSZ 00,F
0DF2:  BRA    0DF0
0DF4:  BRA    0DF6
0DF6:  NOP   
0DF8:  BSF    F93.0
0DFA:  MOVLW  11
0DFC:  MOVWF  00
0DFE:  DECFSZ 00,F
0E00:  BRA    0DFE
....................  
....................    m = (m << 8) | m2; 
0E02:  MOVFF  06,0B
0E06:  CLRF   0A
0E08:  MOVF   0A,W
0E0A:  IORWF  08,W
0E0C:  MOVWF  06
0E0E:  MOVF   0B,W
0E10:  IORWF  09,W
0E12:  MOVWF  07
....................    return m; 
0E14:  MOVFF  06,01
0E18:  MOVFF  07,02
0E1C:  GOTO   0E28 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_cm_izqui(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
0936:  BSF    F93.0
0938:  MOVLW  11
093A:  MOVWF  00
093C:  DECFSZ 00,F
093E:  BRA    093C
0940:  BSF    F93.1
0942:  MOVLW  11
0944:  MOVWF  00
0946:  DECFSZ 00,F
0948:  BRA    0946
094A:  BCF    F8A.0
094C:  BCF    F93.0
094E:  MOVLW  11
0950:  MOVWF  00
0952:  DECFSZ 00,F
0954:  BRA    0952
0956:  BCF    F8A.1
0958:  BCF    F93.1
....................    delay_us(50); 
095A:  MOVLW  C7
095C:  MOVWF  00
095E:  DECFSZ 00,F
0960:  BRA    095E
0962:  BRA    0964
....................    i2c_write(SRF02WY); 
0964:  MOVLW  E4
0966:  MOVWF  0A
0968:  RCALL  087E
....................    delay_us(50); 
096A:  MOVLW  C7
096C:  MOVWF  00
096E:  DECFSZ 00,F
0970:  BRA    096E
0972:  BRA    0974
....................    i2c_write(COMMAND); 
0974:  CLRF   0A
0976:  RCALL  087E
....................    delay_us(50); 
0978:  MOVLW  C7
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
....................    i2c_write(0x51); 
0982:  MOVLW  51
0984:  MOVWF  0A
0986:  RCALL  087E
....................    delay_us(50); 
0988:  MOVLW  C7
098A:  MOVWF  00
098C:  DECFSZ 00,F
098E:  BRA    098C
0990:  BRA    0992
....................    i2c_stop(); 
0992:  BCF    F93.0
0994:  NOP   
0996:  BSF    F93.1
0998:  BTFSS  F81.1
099A:  BRA    0998
099C:  MOVLW  11
099E:  MOVWF  00
09A0:  DECFSZ 00,F
09A2:  BRA    09A0
09A4:  BRA    09A6
09A6:  NOP   
09A8:  BSF    F93.0
09AA:  MOVLW  11
09AC:  MOVWF  00
09AE:  DECFSZ 00,F
09B0:  BRA    09AE
....................    delay_ms(80); 
09B2:  MOVLW  50
09B4:  MOVWF  0A
09B6:  RCALL  08C6
....................    i2c_start(); 
09B8:  BSF    F93.0
09BA:  MOVLW  11
09BC:  MOVWF  00
09BE:  DECFSZ 00,F
09C0:  BRA    09BE
09C2:  BSF    F93.1
09C4:  MOVLW  11
09C6:  MOVWF  00
09C8:  DECFSZ 00,F
09CA:  BRA    09C8
09CC:  BCF    F8A.0
09CE:  BCF    F93.0
09D0:  MOVLW  11
09D2:  MOVWF  00
09D4:  DECFSZ 00,F
09D6:  BRA    09D4
09D8:  BCF    F8A.1
09DA:  BCF    F93.1
....................    delay_us(50); 
09DC:  MOVLW  C7
09DE:  MOVWF  00
09E0:  DECFSZ 00,F
09E2:  BRA    09E0
09E4:  BRA    09E6
....................    i2c_write(SRF02WY); 
09E6:  MOVLW  E4
09E8:  MOVWF  0A
09EA:  RCALL  087E
....................    delay_us(50); 
09EC:  MOVLW  C7
09EE:  MOVWF  00
09F0:  DECFSZ 00,F
09F2:  BRA    09F0
09F4:  BRA    09F6
....................    i2c_write(MEASUREH); 
09F6:  MOVLW  02
09F8:  MOVWF  0A
09FA:  RCALL  087E
....................    delay_us(50); 
09FC:  MOVLW  C7
09FE:  MOVWF  00
0A00:  DECFSZ 00,F
0A02:  BRA    0A00
0A04:  BRA    0A06
....................    i2c_start(); 
0A06:  BSF    F93.0
0A08:  MOVLW  11
0A0A:  MOVWF  00
0A0C:  DECFSZ 00,F
0A0E:  BRA    0A0C
0A10:  BSF    F93.1
0A12:  MOVLW  11
0A14:  MOVWF  00
0A16:  DECFSZ 00,F
0A18:  BRA    0A16
0A1A:  BTFSS  F81.1
0A1C:  BRA    0A1A
0A1E:  BCF    F8A.0
0A20:  BCF    F93.0
0A22:  MOVLW  11
0A24:  MOVWF  00
0A26:  DECFSZ 00,F
0A28:  BRA    0A26
0A2A:  BCF    F8A.1
0A2C:  BCF    F93.1
....................    delay_us(50); 
0A2E:  MOVLW  C7
0A30:  MOVWF  00
0A32:  DECFSZ 00,F
0A34:  BRA    0A32
0A36:  BRA    0A38
....................    i2c_write(SRF02RY); 
0A38:  MOVLW  E5
0A3A:  MOVWF  0A
0A3C:  RCALL  087E
....................    delay_us(50); 
0A3E:  MOVLW  C7
0A40:  MOVWF  00
0A42:  DECFSZ 00,F
0A44:  BRA    0A42
0A46:  BRA    0A48
....................    m = i2c_read(); 
0A48:  MOVLW  01
0A4A:  MOVWF  00
0A4C:  RCALL  08EE
0A4E:  CLRF   07
0A50:  MOVFF  01,06
....................    delay_us(50); 
0A54:  MOVLW  C7
0A56:  MOVWF  00
0A58:  DECFSZ 00,F
0A5A:  BRA    0A58
0A5C:  BRA    0A5E
....................    m2 = i2c_read(0); 
0A5E:  CLRF   00
0A60:  RCALL  08EE
0A62:  CLRF   09
0A64:  MOVFF  01,08
....................    delay_us(50); 
0A68:  MOVLW  C7
0A6A:  MOVWF  00
0A6C:  DECFSZ 00,F
0A6E:  BRA    0A6C
0A70:  BRA    0A72
....................    i2c_stop(); 
0A72:  BCF    F93.0
0A74:  NOP   
0A76:  BSF    F93.1
0A78:  BTFSS  F81.1
0A7A:  BRA    0A78
0A7C:  MOVLW  11
0A7E:  MOVWF  00
0A80:  DECFSZ 00,F
0A82:  BRA    0A80
0A84:  BRA    0A86
0A86:  NOP   
0A88:  BSF    F93.0
0A8A:  MOVLW  11
0A8C:  MOVWF  00
0A8E:  DECFSZ 00,F
0A90:  BRA    0A8E
....................  
....................    m = (m << 8) | m2; 
0A92:  MOVFF  06,0B
0A96:  CLRF   0A
0A98:  MOVF   0A,W
0A9A:  IORWF  08,W
0A9C:  MOVWF  06
0A9E:  MOVF   0B,W
0AA0:  IORWF  09,W
0AA2:  MOVWF  07
....................    return m; 
0AA4:  MOVFF  06,01
0AA8:  MOVFF  07,02
0AAC:  GOTO   0AB8 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x50); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x52); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x57); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x56); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x58); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... void srf_burst(){ 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x5C); 
....................    delay_us(50); 
....................    i2c_stop(); 
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0856:  CLRF   FEA
0858:  MOVLW  06
085A:  MOVWF  FE9
085C:  MOVF   FEF,W
085E:  BZ    087C
0860:  MOVLW  0F
0862:  MOVWF  01
0864:  CLRF   00
0866:  DECFSZ 00,F
0868:  BRA    0866
086A:  DECFSZ 01,F
086C:  BRA    0864
086E:  MOVLW  8F
0870:  MOVWF  00
0872:  DECFSZ 00,F
0874:  BRA    0872
0876:  NOP   
0878:  DECFSZ FEF,F
087A:  BRA    0860
087C:  RETURN 0
....................  
.................... void DELANTE(){ 
....................     M1_H(); 
*
0850:  BRA    0830
....................     M2_A(); 
0852:  BRA    0840
0854:  RETURN 0
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_A(); 
....................    M2_H(); 
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
*
0C9E:  BRA    0C7E
....................    M2_P(); 
0CA0:  BRA    0C8E
0CA2:  GOTO   0E8E (RETURN)
.................... } 
....................  
.................... void DISPARAR(){ 
....................    M3_H(); 
....................    M4_H(); 
.................... } 
....................  
.................... void RECOGER(){ 
....................    M3_A(); 
....................    M4_A(); 
.................... } 
....................  
.................... void IMPACTO(){ 
....................    DISPARAR(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(700); 
....................    RECOGER(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(500); 
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_P(); 
....................    M2_H(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_H(); 
....................    M2_P(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... int ULTRA_SONIDOS_FRENTE(int dist){ 
....................    delay_ms(1); 
*
0C54:  MOVLW  01
0C56:  MOVWF  06
0C58:  RCALL  0856
....................    if(srf_measure_cm_frente() < dist)  
0C5A:  BRA    0ADA
0C5C:  MOVFF  02,07
0C60:  MOVFF  01,06
0C64:  MOVF   07,F
0C66:  BNZ   0C76
0C68:  MOVF   05,W
0C6A:  SUBWF  06,W
0C6C:  BC    0C76
....................       return 1; 
0C6E:  MOVLW  01
0C70:  MOVWF  01
0C72:  BRA    0C7A
0C74:  BRA    0C7A
....................    else 
....................       return 0; 
0C76:  MOVLW  00
0C78:  MOVWF  01
0C7A:  GOTO   0E88 (RETURN)
.................... } 
....................  
.................... int ULTRA_SONIDOS_DERE(int dist){ 
....................    delay_ms(1); 
*
0E20:  MOVLW  01
0E22:  MOVWF  06
0E24:  RCALL  0856
....................    if(srf_measure_cm_dere() < dist)  
0E26:  BRA    0CA6
0E28:  MOVFF  02,07
0E2C:  MOVFF  01,06
0E30:  MOVF   07,F
0E32:  BNZ   0E42
0E34:  MOVF   05,W
0E36:  SUBWF  06,W
0E38:  BC    0E42
....................       return 1; 
0E3A:  MOVLW  01
0E3C:  MOVWF  01
0E3E:  BRA    0E46
0E40:  BRA    0E46
....................    else 
....................       return 0; 
0E42:  MOVLW  00
0E44:  MOVWF  01
0E46:  GOTO   0EA4 (RETURN)
.................... } 
....................  
....................  
.................... int ULTRA_SONIDOS_IZQUI(int dist){ 
....................    delay_ms(1); 
*
0AB0:  MOVLW  01
0AB2:  MOVWF  06
0AB4:  RCALL  0856
....................    if(srf_measure_cm_izqui() < dist)  
0AB6:  BRA    0936
0AB8:  MOVFF  02,07
0ABC:  MOVFF  01,06
0AC0:  MOVF   07,F
0AC2:  BNZ   0AD2
0AC4:  MOVF   05,W
0AC6:  SUBWF  06,W
0AC8:  BC    0AD2
....................       return 1; 
0ACA:  MOVLW  01
0ACC:  MOVWF  01
0ACE:  BRA    0AD6
0AD0:  BRA    0AD6
....................    else 
....................       return 0; 
0AD2:  MOVLW  00
0AD4:  MOVWF  01
0AD6:  GOTO   0E78 (RETURN)
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
....................  
.................... void main() { 
*
0E4A:  CLRF   FF8
0E4C:  BCF    FD0.7
0E4E:  MOVF   FC1,W
0E50:  ANDLW  C0
0E52:  IORLW  0F
0E54:  MOVWF  FC1
0E56:  MOVLW  07
0E58:  MOVWF  FB4
....................    led_on(); 
0E5A:  BCF    F92.5
0E5C:  BSF    F89.5
....................    delay_ms(3000); 
0E5E:  MOVLW  0C
0E60:  MOVWF  05
0E62:  MOVLW  FA
0E64:  MOVWF  06
0E66:  RCALL  0808
0E68:  DECFSZ 05,F
0E6A:  BRA    0E62
....................    DELANTE(); 
0E6C:  RCALL  0850
....................    led_off(); 
0E6E:  BCF    F92.5
0E70:  BCF    F89.5
....................    while(1){ 
....................       if(ULTRA_SONIDOS_IZQUI(30)){ 
0E72:  MOVLW  1E
0E74:  MOVWF  05
0E76:  BRA    0AB0
0E78:  MOVF   01,F
0E7A:  BZ    0E82
....................          led_on(); 
0E7C:  BCF    F92.5
0E7E:  BSF    F89.5
....................       } 
0E80:  BRA    0EB0
....................       else if(ULTRA_SONIDOS_FRENTE(30)){ 
0E82:  MOVLW  1E
0E84:  MOVWF  05
0E86:  BRA    0C54
0E88:  MOVF   01,F
0E8A:  BZ    0E9E
....................          PARAR(); 
0E8C:  BRA    0C9E
....................          //led_on(); 
....................          delay_ms(1000); 
0E8E:  MOVLW  04
0E90:  MOVWF  05
0E92:  MOVLW  FA
0E94:  MOVWF  06
0E96:  RCALL  0808
0E98:  DECFSZ 05,F
0E9A:  BRA    0E92
....................          //DERECHA(600); 
....................       } 
0E9C:  BRA    0EB0
....................       else if(ULTRA_SONIDOS_DERE(30)){ 
0E9E:  MOVLW  1E
0EA0:  MOVWF  05
0EA2:  BRA    0E20
0EA4:  MOVF   01,F
0EA6:  BZ    0EAE
....................          led_on(); 
0EA8:  BCF    F92.5
0EAA:  BSF    F89.5
....................       } 
0EAC:  BRA    0EB0
....................       else 
....................          DELANTE(); 
0EAE:  RCALL  0850
0EB0:  BRA    0E72
....................    } 
.................... } 
0EB2:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
