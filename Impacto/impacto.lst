CCS PCH C Compiler, Version 5.008, 5967               15-jun.-19 01:02

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\Impacto\impacto.lst

               ROM used:   122 bytes (0%)
                           Largest free fragment is 30594
               RAM used:   5 (0%) at main() level
                           6 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   0852
.................... #include "tarjeta.h"  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
*
0842:  BCF    F92.3
0844:  BSF    F89.3
....................    output_low(PIN_E2); 
0846:  BCF    F96.2
0848:  BCF    F8D.2
....................    output_high(PIN_E1); 
084A:  BCF    F96.1
084C:  BSF    F8D.1
084E:  GOTO   087A (RETURN)
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
*
0832:  BCF    F92.3
0834:  BSF    F89.3
....................    output_high(PIN_E2); 
0836:  BCF    F96.2
0838:  BSF    F8D.2
....................    output_low(PIN_E1); 
083A:  BCF    F96.1
083C:  BCF    F8D.1
083E:  GOTO   0872 (RETURN)
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "mismov.h"  
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h" 
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... //#include "srf02.h" 
.................... #use delay (clock=48000000) 
....................  
.................... void DELANTE(){ 
....................    M1_H(); 
....................    M2_H(); 
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_A(); 
....................    M2_A(); 
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
....................    M2_P(); 
.................... } 
....................  
.................... void DISPARAR(){ 
....................    M3_H(); 
....................    M4_H(); 
.................... } 
....................  
.................... void RECOGER(){ 
....................    M3_A(); 
....................    M4_A(); 
.................... } 
....................  
.................... void IMPACTO(){ 
....................    DISPARAR(); 
....................    delay_ms(200); 
....................    PARAR(); 
....................    delay_ms(300); 
....................    RECOGER(); 
....................    delay_ms(500); 
....................    PARAR(); 
....................    delay_ms(500); 
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_P(); 
....................    M2_A(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_A(); 
....................    M2_P(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... /*int ULTRA_SONIDOS_FRENTE(int dist){ 
....................    delay_ms(1); 
....................    if(srf_measure_cm_frente() < dist)  
....................       return 1; 
....................    else 
....................       return 0; 
.................... } 
....................  
.................... int ULTRA_SONIDOS_DERE(int dist){ 
....................    delay_ms(1); 
....................    if(srf_measure_cm_dere() < dist)  
....................       return 1; 
....................    else 
....................       return 0; 
.................... } 
....................  
....................  
.................... int ULTRA_SONIDOS_IZQUI(int dist){ 
....................    delay_ms(1); 
....................    if(srf_measure_cm_izqui() < dist)  
....................       return 1; 
....................    else 
....................       return 0; 
.................... }*/ 
....................  
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000)  
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  GOTO   086C (RETURN)
....................  
....................  
.................... void inicializarTimer0PWM(){  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_BIT);  
....................    enable_interrupts(INT_TIMER0);  
....................    enable_interrupts(GLOBAL);  
.................... }   
....................   
.................... void main(){  
*
0852:  CLRF   FF8
0854:  BCF    FD0.7
0856:  MOVF   FC1,W
0858:  ANDLW  C0
085A:  IORLW  0F
085C:  MOVWF  FC1
085E:  MOVLW  07
0860:  MOVWF  FB4
....................    //inicializarTimer0PWM();  
....................    //M1_A(); 
....................    //M2_A(); 
....................    delay_ms(500); 
0862:  MOVLW  02
0864:  MOVWF  05
0866:  MOVLW  FA
0868:  MOVWF  06
086A:  BRA    0808
086C:  DECFSZ 05,F
086E:  BRA    0866
....................    while(1){ 
....................       M4_H(); 
0870:  BRA    0832
....................       if(IN2 /*&& cont<2*/){ 
0872:  BSF    F95.1
0874:  BTFSS  F83.1
0876:  BRA    087A
....................          //delay_ms(500); 
....................          //IMPACTO(); 
....................          M4_A(); 
0878:  BRA    0842
....................       } 
087A:  BRA    0870
....................       /*else if(IN2 && cont>2){ 
....................          M1_A(); 
....................          M2_A(); 
....................          cont=0; 
....................          delay_ms(500); 
....................       }*/ 
....................           
....................    }   
.................... } 
....................  
087C:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
