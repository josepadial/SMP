CCS PCH C Compiler, Version 5.008, 5967               12-jun.-19 12:39

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\Controlar giro\controlar_giro.lst

               ROM used:   400 bytes (1%)
                           Largest free fragment is 30316
               RAM used:   5 (0%) at main() level
                           8 (0%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0800:  GOTO   0936
.................... #include "tarjeta.h"   
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
*
0830:  BCF    F92.1
0832:  BSF    F89.1
....................    output_high(PIN_D7); 
0834:  BCF    F95.7
0836:  BSF    F8C.7
....................    output_low(PIN_D6); 
0838:  BCF    F95.6
083A:  BCF    F8C.6
083C:  GOTO   0852 (RETURN)
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
*
08E8:  BCF    F92.1
08EA:  BSF    F89.1
....................    output_low(PIN_D7); 
08EC:  BCF    F95.7
08EE:  BCF    F8C.7
....................    output_high(PIN_D6); 
08F0:  BCF    F95.6
08F2:  BSF    F8C.6
08F4:  RETURN 0
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0858:  BCF    F92.1
085A:  BSF    F89.1
....................    output_low(PIN_D7); 
085C:  BCF    F95.7
085E:  BCF    F8C.7
....................    output_low(PIN_D6); 
0860:  BCF    F95.6
0862:  BCF    F8C.6
0864:  RETURN 0
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
*
0840:  BCF    F92.0
0842:  BSF    F89.0
....................    output_high(PIN_C2); 
0844:  BCF    F94.2
0846:  BSF    F8B.2
....................    output_low(PIN_D5); 
0848:  BCF    F95.5
084A:  BCF    F8C.5
084C:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
*
08A2:  BCF    F92.0
08A4:  BSF    F89.0
....................    output_low(PIN_C2); 
08A6:  BCF    F94.2
08A8:  BCF    F8B.2
....................    output_high(PIN_D5); 
08AA:  BCF    F95.5
08AC:  BSF    F8C.5
08AE:  RETURN 0
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
*
0866:  BCF    F92.0
0868:  BSF    F89.0
....................    output_low(PIN_C2); 
086A:  BCF    F94.2
086C:  BCF    F8B.2
....................    output_low(PIN_D5); 
086E:  BCF    F95.5
0870:  BCF    F8C.5
0872:  RETURN 0
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #include "mismov.h"   
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h"  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #use delay (clock=48000000) 
*
087A:  CLRF   FEA
087C:  MOVLW  08
087E:  MOVWF  FE9
0880:  MOVF   FEF,W
0882:  BZ    08A0
0884:  MOVLW  0F
0886:  MOVWF  01
0888:  CLRF   00
088A:  DECFSZ 00,F
088C:  BRA    088A
088E:  DECFSZ 01,F
0890:  BRA    0888
0892:  MOVLW  8F
0894:  MOVWF  00
0896:  DECFSZ 00,F
0898:  BRA    0896
089A:  NOP   
089C:  DECFSZ FEF,F
089E:  BRA    0884
08A0:  RETURN 0
....................  
.................... void DELANTE(){ 
....................    M1_A(); 
*
0850:  BRA    0830
....................    M2_A(); 
0852:  BRA    0840
0854:  GOTO   0956 (RETURN)
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_H(); 
*
092E:  RCALL  08E8
....................    M2_H(); 
0930:  RCALL  08A2
0932:  GOTO   0982 (RETURN)
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
*
0874:  RCALL  0858
....................    M2_P(); 
0876:  RCALL  0866
0878:  RETURN 0
.................... } 
....................  
.................... void IMPACTO(){ 
....................    M3_H(); 
....................    M4_H(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(700); 
....................    M3_A(); 
....................    M4_A(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(500); 
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
*
08B0:  RCALL  0874
....................    delay_ms(400); 
08B2:  MOVLW  02
08B4:  MOVWF  07
08B6:  MOVLW  C8
08B8:  MOVWF  08
08BA:  RCALL  087A
08BC:  DECFSZ 07,F
08BE:  BRA    08B6
....................    M1_P(); 
08C0:  RCALL  0858
....................    M2_H(); 
08C2:  RCALL  08A2
....................    delay_ms(t); 
08C4:  MOVFF  06,07
08C8:  INCF   07,F
08CA:  DECF   07,F
08CC:  BTFSC  FD8.2
08CE:  BRA    08D6
08D0:  SETF   08
08D2:  RCALL  087A
08D4:  BRA    08CA
08D6:  MOVFF  05,08
08DA:  RCALL  087A
....................    PARAR(); 
08DC:  RCALL  0874
....................    delay_ms(250); 
08DE:  MOVLW  FA
08E0:  MOVWF  08
08E2:  RCALL  087A
08E4:  GOTO   0976 (RETURN)
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
*
08F6:  RCALL  0874
....................    delay_ms(400); 
08F8:  MOVLW  02
08FA:  MOVWF  07
08FC:  MOVLW  C8
08FE:  MOVWF  08
0900:  RCALL  087A
0902:  DECFSZ 07,F
0904:  BRA    08FC
....................    M1_H(); 
0906:  RCALL  08E8
....................    M2_P(); 
0908:  RCALL  0866
....................    delay_ms(t); 
090A:  MOVFF  06,07
090E:  INCF   07,F
0910:  DECF   07,F
0912:  BTFSC  FD8.2
0914:  BRA    091C
0916:  SETF   08
0918:  RCALL  087A
091A:  BRA    0910
091C:  MOVFF  05,08
0920:  RCALL  087A
....................    PARAR(); 
0922:  RCALL  0874
....................    delay_ms(250); 
0924:  MOVLW  FA
0926:  MOVWF  08
0928:  RCALL  087A
092A:  GOTO   0980 (RETURN)
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000)  
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
....................  
....................  
.................... void inicializarTimer0PWM(){  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_BIT);  
....................    enable_interrupts(INT_TIMER0);  
....................    enable_interrupts(GLOBAL);  
.................... }   
....................   
.................... void main(){  
*
0936:  CLRF   FF8
0938:  BCF    FD0.7
093A:  MOVF   FC1,W
093C:  ANDLW  C0
093E:  IORLW  0F
0940:  MOVWF  FC1
0942:  MOVLW  07
0944:  MOVWF  FB4
....................    //inicializarTimer0PWM();  
....................    delay_ms(3000); 
0946:  MOVLW  0C
0948:  MOVWF  05
094A:  MOVLW  FA
094C:  MOVWF  06
094E:  RCALL  0808
0950:  DECFSZ 05,F
0952:  BRA    094A
....................    while(1){ 
....................       DELANTE(); 
0954:  BRA    0850
....................       delay_ms(500); 
0956:  MOVLW  02
0958:  MOVWF  05
095A:  MOVLW  FA
095C:  MOVWF  06
095E:  RCALL  0808
0960:  DECFSZ 05,F
0962:  BRA    095A
....................       led_on(); 
0964:  BCF    F92.5
0966:  BSF    F89.5
....................       led_off(); 
0968:  BCF    F92.5
096A:  BCF    F89.5
....................       DERECHA(600); 
096C:  MOVLW  02
096E:  MOVWF  06
0970:  MOVLW  58
0972:  MOVWF  05
0974:  BRA    08B0
....................       IZQUIERDA(600); 
0976:  MOVLW  02
0978:  MOVWF  06
097A:  MOVLW  58
097C:  MOVWF  05
097E:  BRA    08F6
....................       ATRAS(); 
0980:  BRA    092E
....................       delay_ms(500);  
0982:  MOVLW  02
0984:  MOVWF  05
0986:  MOVLW  FA
0988:  MOVWF  06
098A:  RCALL  0808
098C:  DECFSZ 05,F
098E:  BRA    0986
0990:  BRA    0954
....................    }   
.................... } 
....................  
0992:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
