CCS PCH C Compiler, Version 5.008, 5967               13-may.-19 16:49

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\Motores + Sensor + Colision\main.lst

               ROM used:   196 bytes (1%)
                           Largest free fragment is 30520
               RAM used:   4 (0%) at main() level
                           5 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0800:  GOTO   088E
.................... #include "tarjeta.h"  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
*
085E:  BCF    F92.1
0860:  BSF    F89.1
....................    output_high(PIN_D7); 
0862:  BCF    F95.7
0864:  BSF    F8C.7
....................    output_low(PIN_D6); 
0866:  BCF    F95.6
0868:  BCF    F8C.6
086A:  GOTO   08BC (RETURN)
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
*
0808:  BCF    F92.1
080A:  BSF    F89.1
....................    output_low(PIN_D7); 
080C:  BCF    F95.7
080E:  BCF    F8C.7
....................    output_high(PIN_D6); 
0810:  BCF    F95.6
0812:  BSF    F8C.6
0814:  RETURN 0
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0824:  BCF    F92.1
0826:  BSF    F89.1
....................    output_low(PIN_D7); 
0828:  BCF    F95.7
082A:  BCF    F8C.7
....................    output_low(PIN_D6); 
082C:  BCF    F95.6
082E:  BCF    F8C.6
0830:  GOTO   08B2 (RETURN)
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
*
086E:  BCF    F92.0
0870:  BSF    F89.0
....................    output_high(PIN_C2); 
0872:  BCF    F94.2
0874:  BSF    F8B.2
....................    output_low(PIN_D5); 
0876:  BCF    F95.5
0878:  BCF    F8C.5
087A:  GOTO   08BE (RETURN)
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
087E:  BCF    F92.0
0880:  BSF    F89.0
....................    output_low(PIN_C2); 
0882:  BCF    F94.2
0884:  BCF    F8B.2
....................    output_high(PIN_D5); 
0886:  BCF    F95.5
0888:  BSF    F8C.5
088A:  GOTO   08C4 (RETURN)
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
*
0816:  BCF    F92.0
0818:  BSF    F89.0
....................    output_low(PIN_C2); 
081A:  BCF    F94.2
081C:  BCF    F8B.2
....................    output_low(PIN_D5); 
081E:  BCF    F95.5
0820:  BCF    F8C.5
0822:  RETURN 0
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... #use delay (clock=48000000)  
*
0834:  CLRF   FEA
0836:  MOVLW  05
0838:  MOVWF  FE9
083A:  MOVF   FEF,W
083C:  BZ    085A
083E:  MOVLW  0F
0840:  MOVWF  01
0842:  CLRF   00
0844:  DECFSZ 00,F
0846:  BRA    0844
0848:  DECFSZ 01,F
084A:  BRA    0842
084C:  MOVLW  8F
084E:  MOVWF  00
0850:  DECFSZ 00,F
0852:  BRA    0850
0854:  NOP   
0856:  DECFSZ FEF,F
0858:  BRA    083E
085A:  GOTO   08BA (RETURN)
....................  
....................  
.................... void inicializarTimer0PWM(){  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_BIT);  
....................    enable_interrupts(INT_TIMER0);  
....................    enable_interrupts(GLOBAL);  
.................... }   
....................   
.................... void main(){  
*
088E:  CLRF   FF8
0890:  BCF    FD0.7
0892:  MOVF   FC1,W
0894:  ANDLW  C0
0896:  IORLW  0F
0898:  MOVWF  FC1
089A:  MOVLW  07
089C:  MOVWF  FB4
....................    //inicializarTimer0PWM();  
....................      
....................    while(1){ 
....................       if(!IN1){ 
089E:  BSF    F95.0
08A0:  BTFSC  F83.0
08A2:  BRA    08AA
....................          M1_H(); 
08A4:  RCALL  0808
....................          M2_P(); 
08A6:  RCALL  0816
....................       } 
08A8:  BRA    08C4
....................       else if(IN2){ 
08AA:  BSF    F95.1
08AC:  BTFSS  F83.1
08AE:  BRA    08C0
....................          M1_P(); 
08B0:  BRA    0824
....................          M2_P(); 
08B2:  RCALL  0816
....................          delay_ms(50); 
08B4:  MOVLW  32
08B6:  MOVWF  05
08B8:  BRA    0834
....................          M1_A(); 
08BA:  BRA    085E
....................          M2_A(); 
08BC:  BRA    086E
....................       } 
08BE:  BRA    08C4
....................       else{ 
....................          M1_H(); 
08C0:  RCALL  0808
....................          M2_H(); 
08C2:  BRA    087E
....................       } 
08C4:  BRA    089E
....................    } 
.................... } 
08C6:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
