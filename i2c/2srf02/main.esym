C L "MAIN" 0 11 1 "FUNCTION"
D G "__PCH__" 0 16 ""5.008""
D G "__DEVICE__" 0 16 "4550"
D G "__DATE__" 0 16 ""12-jun.-19""
D G "__TIME__" 0 16 ""13:56:28""
D G "_MISMOV_" 1 2 ""
D G "_TARJETA_" 2 3 ""
c L "set_tris_a" 3 1 22 "FUNCTION"
v L "value" 3 36 "int8" `54 
f B "set_tris_a" 3 36 "void(int8 value)" `53 
v L "value" 3 37 "int8" `56 
f B "set_tris_b" 3 37 "void(int8 value)" `55 
v L "value" 3 38 "int8" `58 
f B "set_tris_c" 3 38 "void(int8 value)" `57 
v L "value" 3 39 "int8" `60 
f B "set_tris_d" 3 39 "void(int8 value)" `59 
v L "value" 3 40 "int8" `62 
f B "set_tris_e" 3 40 "void(int8 value)" `61 
f B "get_tris_a" 3 41 "int8()" `63 
f B "get_tris_b" 3 42 "int8()" `64 
f B "get_tris_c" 3 43 "int8()" `65 
f B "get_tris_d" 3 44 "int8()" `66 
f B "get_tris_e" 3 45 "int8()" `67 
v L "value" 3 46 "int8" `69 
f B "output_a" 3 46 "void(int8 value)" `68 
v L "value" 3 47 "int8" `71 
f B "output_b" 3 47 "void(int8 value)" `70 
v L "value" 3 48 "int8" `73 
f B "output_c" 3 48 "void(int8 value)" `72 
v L "value" 3 49 "int8" `75 
f B "output_d" 3 49 "void(int8 value)" `74 
v L "value" 3 50 "int8" `77 
f B "output_e" 3 50 "void(int8 value)" `76 
f B "input_a" 3 51 "int8()" `78 
f B "input_b" 3 52 "int8()" `79 
f B "input_c" 3 53 "int8()" `80 
f B "input_d" 3 54 "int8()" `81 
f B "input_e" 3 55 "int8()" `82 
f B "input_change_a" 3 56 "int8()" `83 
f B "input_change_b" 3 57 "int8()" `84 
f B "input_change_c" 3 58 "int8()" `85 
f B "input_change_d" 3 59 "int8()" `86 
f B "input_change_e" 3 60 "int8()" `87 
v L "pin" 3 61 "int16" `89 
f B "input" 3 61 "int8(int16 pin)" `88 
v L "pin" 3 62 "int16" `91 
f B "input_state" 3 62 "int8(int16 pin)" `90 
v L "pin" 3 63 "int16" `93 
f B "output_low" 3 63 "void(int16 pin)" `92 
v L "pin" 3 64 "int16" `95 
f B "output_high" 3 64 "void(int16 pin)" `94 
v L "pin" 3 65 "int16" `97 
f B "output_toggle" 3 65 "void(int16 pin)" `96 
v L "pin" 3 66 "int16" `99 
v L "level" 3 66 "int8" `100 
f B "output_bit" 3 66 "void(int16 pin,int8 level)" `98 
v L "pin" 3 67 "int16" `102 
f B "output_float" 3 67 "void(int16 pin)" `101 
v L "pin" 3 68 "int16" `104 
f B "output_drive" 3 68 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 3 72 "31744"
d G "PIN_A1" 3 73 "31745"
d G "PIN_A2" 3 74 "31746"
d G "PIN_A3" 3 75 "31747"
d G "PIN_A4" 3 76 "31748"
d G "PIN_A5" 3 77 "31749"
d G "PIN_A6" 3 78 "31750"
d G "PIN_B0" 3 80 "31752"
d G "PIN_B1" 3 81 "31753"
d G "PIN_B2" 3 82 "31754"
d G "PIN_B3" 3 83 "31755"
d G "PIN_B4" 3 84 "31756"
d G "PIN_B5" 3 85 "31757"
d G "PIN_B6" 3 86 "31758"
d G "PIN_B7" 3 87 "31759"
d G "PIN_C0" 3 89 "31760"
d G "PIN_C1" 3 90 "31761"
d G "PIN_C2" 3 91 "31762"
d G "PIN_C4" 3 92 "31764"
d G "PIN_C5" 3 93 "31765"
d G "PIN_C6" 3 94 "31766"
d G "PIN_C7" 3 95 "31767"
d G "PIN_D0" 3 97 "31768"
d G "PIN_D1" 3 98 "31769"
d G "PIN_D2" 3 99 "31770"
d G "PIN_D3" 3 100 "31771"
d G "PIN_D4" 3 101 "31772"
d G "PIN_D5" 3 102 "31773"
d G "PIN_D6" 3 103 "31774"
d G "PIN_D7" 3 104 "31775"
d G "PIN_E0" 3 106 "31776"
d G "PIN_E1" 3 107 "31777"
d G "PIN_E2" 3 108 "31778"
d G "PIN_E3" 3 109 "31779"
d G "PIN_E7" 3 110 "31783"
d G "FALSE" 3 113 "0"
d G "TRUE" 3 114 "1"
d G "BYTE" 3 116 "int8"
d G "BOOLEAN" 3 117 "int1"
d G "getc" 3 119 "getch"
d G "fgetc" 3 120 "getch"
d G "getchar" 3 121 "getch"
d G "putc" 3 122 "putchar"
d G "fputc" 3 123 "putchar"
d G "fgets" 3 124 "gets"
d G "fputs" 3 125 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
f B "restart_cause" 3 130 "int8()" `105 
f B "reset_cpu" 3 131 "void()" `106 
f B "sleep" 3 132 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 3 134 "7"
d G "MCLR_FROM_SLEEP" 3 135 "11"
d G "MCLR_FROM_RUN" 3 136 "15"
d G "NORMAL_POWER_UP" 3 137 "12"
d G "BROWNOUT_RESTART" 3 138 "14"
d G "WDT_FROM_SLEEP" 3 139 "3"
d G "RESET_INSTRUCTION" 3 140 "0"
d G "SLEEP_FULL" 3 143 "0" "Default"
d G "SLEEP_IDLE" 3 144 "1" "Clock and peripherals don't stop"
c L "sleep" 3 1 5 "FUNCTION"
v L "mode" 3 151 "int8" `109 
f B "setup_timer_0" 3 151 "void(int8 mode)" `108 
v L "value" 3 152 "int16" `111 
f B "set_timer0" 3 152 "void(int16 value)" `110 
f B "get_timer0" 3 153 "int16()" `112 
v L "mode" 3 154 "int8" `114 
v L "prescaler" 3 154 "int8" `115 
f B "setup_counters" 3 154 "void(int8 mode,int8 prescaler)" `113 
v L "value" 3 155 "int16" `117 
f B "set_rtcc" 3 155 "void(int16 value)" `116 
f B "get_rtcc" 3 156 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 3 158 "0"
d G "T0_EXT_L_TO_H" 3 159 "32"
d G "T0_EXT_H_TO_L" 3 160 "48"
d G "T0_DIV_1" 3 162 "8"
d G "T0_DIV_2" 3 163 "0"
d G "T0_DIV_4" 3 164 "1"
d G "T0_DIV_8" 3 165 "2"
d G "T0_DIV_16" 3 166 "3"
d G "T0_DIV_32" 3 167 "4"
d G "T0_DIV_64" 3 168 "5"
d G "T0_DIV_128" 3 169 "6"
d G "T0_DIV_256" 3 170 "7"
d G "T0_OFF" 3 172 "0x80"
d G "T0_8_BIT" 3 174 "0x40"
d G "RTCC_INTERNAL" 3 176 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 3 177 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 3 178 "48"
d G "RTCC_DIV_1" 3 179 "8"
d G "RTCC_DIV_2" 3 180 "0"
d G "RTCC_DIV_4" 3 181 "1"
d G "RTCC_DIV_8" 3 182 "2"
d G "RTCC_DIV_16" 3 183 "3"
d G "RTCC_DIV_32" 3 184 "4"
d G "RTCC_DIV_64" 3 185 "5"
d G "RTCC_DIV_128" 3 186 "6"
d G "RTCC_DIV_256" 3 187 "7"
d G "RTCC_OFF" 3 188 "0x80"
d G "RTCC_8_BIT" 3 189 "0x40"
c L "get_rtcc" 3 1 8 "FUNCTION"
v L "mode" 3 200 "int16" `120 
f B "setup_wdt" 3 200 "void(int16 mode)" `119 
f B "restart_wdt" 3 201 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 3 203 "0x100"
d G "WDT_OFF" 3 204 "0"
d G "WDT_4MS" 3 206 "0x300"
d G "WDT_8MS" 3 207 "0x500"
d G "WDT_16MS" 3 208 "0x700"
d G "WDT_32MS" 3 209 "0x900"
d G "WDT_64MS" 3 210 "0xB00"
d G "WDT_128MS" 3 211 "0xD00"
d G "WDT_256MS" 3 212 "0xF00"
d G "WDT_512MS" 3 213 "0x1100"
d G "WDT_1S" 3 214 "0x1300"
d G "WDT_2S" 3 215 "0x1500"
d G "WDT_4S" 3 216 "0x1700"
d G "WDT_8S" 3 217 "0x1900"
d G "WDT_16" 3 218 "0x1B00"
d G "WDT_32S" 3 219 "0x1D00"
d G "WDT_64S" 3 220 "0x1F00"
d G "WDT_128S" 3 221 "0x2100"
c L "restart_wdt" 3 1 3 "FUNCTION"
v L "mode" 3 227 "int16" `123 
f B "setup_timer_1" 3 227 "void(int16 mode)" `122 
f B "get_timer1" 3 228 "int16()" `124 
v L "value" 3 229 "int16" `126 
f B "set_timer1" 3 229 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 3 232 "0"
d G "T1_INTERNAL" 3 233 "0x85"
d G "T1_EXTERNAL" 3 234 "0x87"
d G "T1_EXTERNAL_SYNC" 3 235 "0x83"
d G "T1_CLK_OUT" 3 237 "8"
d G "T1_DIV_BY_1" 3 239 "0"
d G "T1_DIV_BY_2" 3 240 "0x10"
d G "T1_DIV_BY_4" 3 241 "0x20"
d G "T1_DIV_BY_8" 3 242 "0x30"
c L "set_timer1" 3 1 3 "FUNCTION"
v L "mode" 3 247 "int8" `128 
v L "period" 3 247 "int8" `129 
v L "postscale" 3 247 "int8" `130 
f B "setup_timer_2" 3 247 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 3 248 "int8()" `131 
v L "value" 3 249 "int8" `133 
f B "set_timer2" 3 249 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 3 251 "0"
d G "T2_DIV_BY_1" 3 252 "4"
d G "T2_DIV_BY_4" 3 253 "5"
d G "T2_DIV_BY_16" 3 254 "6"
c L "set_timer2" 3 1 3 "FUNCTION"
v L "mode" 3 259 "int16" `135 
f B "setup_timer_3" 3 259 "void(int16 mode)" `134 
f B "get_timer3" 3 260 "int16()" `136 
v L "value" 3 261 "int16" `138 
f B "set_timer3" 3 261 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 3 264 "0"
d G "T3_INTERNAL" 3 265 "0x85"
d G "T3_EXTERNAL" 3 266 "0x87"
d G "T3_EXTERNAL_SYNC" 3 267 "0x83"
d G "T3_DIV_BY_1" 3 269 "0"
d G "T3_DIV_BY_2" 3 270 "0x10"
d G "T3_DIV_BY_4" 3 271 "0x20"
d G "T3_DIV_BY_8" 3 272 "0x30"
c L "set_timer3" 3 1 4 "FUNCTION"
v L "mode" 3 278 "int32" `140 
f B "setup_ccp1" 3 278 "void(int32 mode)" `139 
v L "mode" 3 279 "int32" `142 
v L "pwm" 3 279 "int8" `143 
f G "setup_ccp1" 3 279 "void(int32 mode,int8 pwm)" `141 
v L "value" 3 280 "int16" `145 
f B "set_pwm1_duty" 3 280 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 3 282 "0"
d G "CCP_CAPTURE_FE" 3 283 "4"
d G "CCP_CAPTURE_RE" 3 284 "5"
d G "CCP_CAPTURE_DIV_4" 3 285 "6"
d G "CCP_CAPTURE_DIV_16" 3 286 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 3 287 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 288 "9"
d G "CCP_COMPARE_INT" 3 289 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 3 290 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 3 291 "0xB"
d G "CCP_PWM" 3 292 "0xC"
d G "CCP_PWM_PLUS_1" 3 293 "0x1c"
d G "CCP_PWM_PLUS_2" 3 294 "0x2c"
d G "CCP_PWM_PLUS_3" 3 295 "0x3c"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 3 301 "0x48"
d G "T3_CCP2" 3 302 "0x8"
d G "CCP_PWM_H_H" 3 305 "0x0c"
d G "CCP_PWM_H_L" 3 306 "0x0d"
d G "CCP_PWM_L_H" 3 307 "0x0e"
d G "CCP_PWM_L_L" 3 308 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 3 310 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 3 311 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 3 312 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 3 314 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 3 315 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 3 316 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 3 317 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 3 318 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 3 319 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 3 320 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 3 322 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 3 323 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 3 324 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 3 326 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 3 327 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 3 328 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 3 330 "0x80000000"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
v L "mode" 3 334 "int32" `150 
f B "setup_ccp2" 3 334 "void(int32 mode)" `149 
v L "mode" 3 335 "int32" `152 
v L "pwm" 3 335 "int8" `153 
f G "setup_ccp2" 3 335 "void(int32 mode,int8 pwm)" `151 
v L "value" 3 336 "int16" `155 
f B "set_pwm2_duty" 3 336 "void(int16 value)" `154 
c L "set_pwm2_duty" 3 1 5 "FUNCTION"
v L "mode" 3 345 "int8" `160 
f B "setup_psp" 3 345 "void(int8 mode)" `159 
f B "psp_output_full" 3 346 "int8()" `161 
f B "psp_input_full" 3 347 "int8()" `162 
f B "psp_overflow" 3 348 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 3 350 "0x10"
d G "PSP_DISABLED" 3 351 "0"
c L "psp_overflow" 3 1 3 "FUNCTION"
v L "mode" 3 358 "int32" `166 
f B "setup_spi" 3 358 "void(int32 mode)" `165 
v L "value" 3 359 "int8" `168 
f B "spi_write" 3 359 "void(int8 value)" `167 
f B "spi_read" 3 360 "int8()" `169 
v L "value" 3 361 "int8" `171 
f G "spi_read" 3 361 "int8(int8 value)" `170 
f B "spi_data_in" 3 362 "int8()" `172  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 3 364 "0x00"
d G "SPI_MASTER" 3 365 "0x20"
d G "SPI_SLAVE" 3 366 "0x24"
d G "SPI_SCK_IDLE_HIGH" 3 367 "0x10"
d G "SPI_SCK_IDLE_LOW" 3 368 "0x00"
d G "SPI_CLK_DIV_4" 3 369 "0x00"
d G "SPI_CLK_DIV_16" 3 370 "0x01"
d G "SPI_CLK_DIV_64" 3 371 "0x02"
d G "SPI_CLK_T2" 3 372 "0x03"
d G "SPI_SS_DISABLED" 3 373 "0x01"
d G "SPI_XMIT_L_TO_H" 3 375 "0x4000"
d G "SPI_XMIT_H_TO_L" 3 376 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 3 378 "0x0000"
d G "SPI_SAMPLE_AT_END" 3 379 "0x8000"
d G "SPI_L_TO_H" 3 382 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 3 383 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 3 1 2 "FUNCTION"
v L "baud" 3 387 "int32" `174 
f B "setup_uart" 3 387 "void(int32 baud)" `173 
v L "baud" 3 388 "int32" `176 
v L "stream" 3 388 "int8" `177 
f G "setup_uart" 3 388 "void(int32 baud,int8 stream)" `175 
v L "baud" 3 389 "int32" `179 
v L "stream" 3 389 "int8" `180 
v L "clock" 3 389 "int32" `181 
f G "setup_uart" 3 389 "void(int32 baud,int8 stream,int32 clock)" `178 
v L "baud" 3 390 "int32" `183 
f B "set_uart_speed" 3 390 "void(int32 baud)" `182 
v L "baud" 3 391 "int32" `185 
v L "stream" 3 391 "int8" `186 
f G "set_uart_speed" 3 391 "void(int32 baud,int8 stream)" `184 
v L "baud" 3 392 "int32" `188 
v L "stream" 3 392 "int8" `189 
v L "clock" 3 392 "int32" `190 
f G "set_uart_speed" 3 392 "void(int32 baud,int8 stream,int32 clock)" `187  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 3 396 "2"
d G "UART_DATA" 3 397 "4"
d G "UART_AUTODETECT" 3 398 "8"
d G "UART_AUTODETECT_NOWAIT" 3 399 "9"
d G "UART_WAKEUP_ON_RDA" 3 400 "10"
d G "UART_SEND_BREAK" 3 401 "13"
c L "set_uart_speed" 3 1 3 "FUNCTION"
v L "mode" 3 405 "int32" `192 
f B "setup_comparator" 3 405 "void(int32 mode)" `191  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 3 407 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 3 408 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 3 409 "0xbcf05"
d G "NC_NC_NC_NC" 3 410 "0x0ff07"
d G "A0_A3_A1_A2" 3 411 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 3 412 "0x9ef01"
d G "A0_VR_A1_VR" 3 413 "0x3ff06"
d G "A3_VR_A2_VR" 3 414 "0xcff0e"
d G "CP1_INVERT" 3 415 "0x0000010"
d G "CP2_INVERT" 3 416 "0x0000020"
c L "setup_comparator" 3 1 2 "FUNCTION"
v L "mode" 3 423 "int8" `196 
f B "setup_vref" 3 423 "void(int8 mode)" `195  "Constants used in setup_vref() are:"
d G "VREF_LOW" 3 425 "0xa0"
d G "VREF_HIGH" 3 426 "0x80"
d G "VREF_F5" 3 428 "0x40"
d G "VREF_COMP" 3 429 "0x10"
c L "setup_vref" 3 1 2 "FUNCTION"
v L "mode" 3 433 "int8" `198 
f B "setup_low_volt_detect" 3 433 "void(int8 mode)" `197  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 3 435 "0x1F"
d G "LVD_45" 3 436 "0x1E"
d G "LVD_42" 3 437 "0x1D"
d G "LVD_40" 3 438 "0x1C"
d G "LVD_38" 3 439 "0x1B"
d G "LVD_36" 3 440 "0x1A"
d G "LVD_35" 3 441 "0x19"
d G "LVD_33" 3 442 "0x18"
d G "LVD_30" 3 443 "0x17"
d G "LVD_28" 3 444 "0x16"
d G "LVD_27" 3 445 "0x15"
d G "LVD_25" 3 446 "0x14"
d G "LVD_24" 3 447 "0x13"
d G "LVD_23" 3 448 "0x12"
d G "LVD_22" 3 449 "0x11"
d G "LVD_21" 3 450 "0x10"
d G "LVD_TRIGGER_BELOW" 3 452 "0"
d G "LVD_TRIGGER_ABOVE" 3 453 "0x80"
c L "setup_low_volt_detect" 3 1 2 "FUNCTION"
v L "mode" 3 458 "int16" `200 
f B "setup_oscillator" 3 458 "int8(int16 mode)" `199 
v L "mode" 3 459 "int16" `202 
v L "tune" 3 459 "sint8" `203 
f G "setup_oscillator" 3 459 "int8(int16 mode,sint8 tune)" `201  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 3 462 "0"
d G "OSC_125KHZ" 3 463 "0x10"
d G "OSC_250KHZ" 3 464 "0x20"
d G "OSC_500KHZ" 3 465 "0x30"
d G "OSC_1MHZ" 3 466 "0x40"
d G "OSC_2MHZ" 3 467 "0x50"
d G "OSC_4MHZ" 3 468 "0x60"
d G "OSC_8MHZ" 3 469 "0x70"
d G "OSC_TIMER1" 3 471 "1"
d G "OSC_INTRC" 3 472 "2"
d G "OSC_NORMAL" 3 473 "0"
d G "OSC_IDLE_MODE" 3 475 "0x80"
d G "OSC_31250" 3 476 "0x8000"
d G "OSC_STATE_STABLE" 3 480 "4"
d G "OSC_STATE_EXT_RUNNING" 3 481 "8"
c L "setup_oscillator" 3 1 4 "FUNCTION"
v L "mode" 3 488 "int16" `205 
f B "setup_adc" 3 488 "void(int16 mode)" `204 
f B "read_adc" 3 489 "int8()" `206 
v L "mode" 3 490 "int8" `208 
f G "read_adc" 3 490 "int8(int8 mode)" `207 
f G "read_adc" 3 491 "int16()" `209 
v L "mode" 3 492 "int8" `211 
f G "read_adc" 3 492 "int16(int8 mode)" `210 
f B "adc_done" 3 493 "int8()" `212  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 3 495 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 496 "0x100"
d G "ADC_CLOCK_DIV_4" 3 497 "0x04"
d G "ADC_CLOCK_DIV_8" 3 498 "0x01"
d G "ADC_CLOCK_DIV_16" 3 499 "0x05"
d G "ADC_CLOCK_DIV_32" 3 500 "0x02"
d G "ADC_CLOCK_DIV_64" 3 501 "0x06"
d G "ADC_CLOCK_INTERNAL" 3 502 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 3 504 "0x00"
d G "ADC_TAD_MUL_2" 3 505 "0x08"
d G "ADC_TAD_MUL_4" 3 506 "0x10"
d G "ADC_TAD_MUL_6" 3 507 "0x18"
d G "ADC_TAD_MUL_8" 3 508 "0x20"
d G "ADC_TAD_MUL_12" 3 509 "0x28"
d G "ADC_TAD_MUL_16" 3 510 "0x30"
d G "ADC_TAD_MUL_20" 3 511 "0x38"
c L "adc_done" 3 1 1 "FUNCTION"
v L "pins" 3 514 "int8" `214 
f B "setup_adc_ports" 3 514 "void(int8 pins)" `213 
v L "pins" 3 515 "int8" `216 
v L "reference" 3 515 "int8" `217 
f G "setup_adc_ports" 3 515 "void(int8 pins,int8 reference)" `215 
v L "channel" 3 516 "int8" `219 
f B "set_adc_channel" 3 516 "void(int8 channel)" `218  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 3 519 "0x0F" "None"
d G "ALL_ANALOG" 3 520 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 3 521 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 3 522 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 3 523 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 3 524 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 3 525 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 3 526 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 3 527 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 3 528 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 3 529 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 3 530 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 3 531 "0x0D" "A0 A1"
d G "AN0" 3 532 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 3 533 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 3 534 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 3 535 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 3 536 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 3 537 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 3 538 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 3 539 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 3 540 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 3 541 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 3 542 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 3 543 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 3 544 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 3 547 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 3 548 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 3 549 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 3 550 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 3 553 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 554 "1"
d G "ADC_READ_ONLY" 3 555 "6"
c L "set_adc_channel" 3 1 3 "FUNCTION"
v L "x" 3 561 "sint8" `221 
f B "abs" 3 561 "sint8(sint8 x)" `220 
v L "x" 3 562 "sint16" `223 
f G "abs" 3 562 "sint16(sint16 x)" `222 
v L "x" 3 563 "sint32" `225 
f G "abs" 3 563 "sint32(sint32 x)" `224 
v L "x" 3 564 "float" `227 
f G "abs" 3 564 "float(float x)" `226 
v L "??65535" 3 565 "int8" `229 
v L "??65535" 3 565 "int8" `230 
f B "_mul" 3 565 "int16(int8 ,int8 )" `228 
v L "??65535" 3 566 "sint8" `229 
v L "??65535" 3 566 "sint8" `233 
f G "_mul" 3 566 "sint16(sint8 ,sint8 )" `231 
v L "??65535" 3 567 "int16" `229 
v L "??65535" 3 567 "int16" `236 
f G "_mul" 3 567 "int32(int16 ,int16 )" `234 
v L "??65535" 3 568 "sint16" `229 
v L "??65535" 3 568 "sint16" `239 
f G "_mul" 3 568 "sint32(sint16 ,sint16 )" `237  "Memory Manipulation Prototypes:"
v L "bank" 3 571 "int8" `241 
v L "offset" 3 571 "int8" `242 
f B "read_bank" 3 571 "int8(int8 bank,int8 offset)" `240 
v L "bank" 3 572 "int8" `244 
v L "offset" 3 572 "int8" `245 
v L "value" 3 572 "int8" `246 
f B "write_bank" 3 572 "void(int8 bank,int8 offset,int8 value)" `243 
v L "dest" 3 573 "*int8" `248 
v L "src" 3 573 "*int8" `249 
f B "strcpy" 3 573 "void(*int8 dest,*int8 src)" `247 
v L "dest" 3 574 "*int8" `251 
v L "src" 3 574 "*int8" `252 
f B "strcopy" 3 574 "void(*int8 dest,*int8 src)" `250 
v L "destination" 3 575 "*int8" `254 
v L "value" 3 575 "int8" `255 
v L "num" 3 575 "int16" `256 
f B "memset" 3 575 "void(*int8 destination,int8 value,int16 num)" `253 
v L "destination" 3 576 "*int8" `258 
v L "source" 3 576 "*int8" `259 
v L "num" 3 576 "int16" `260 
f B "memcpy" 3 576 "void(*int8 destination,*int8 source,int16 num)" `257  "String Prototypes:"
v L "cvalue" 3 579 "int8" `262 
f B "toupper" 3 579 "int8(int8 cvalue)" `261 
v L "cvalue" 3 580 "int8" `264 
f B "tolower" 3 580 "int8(int8 cvalue)" `263 
v L "string" 3 581 "*int8" `266 
v L "cstring" 3 581 "*int8" `267 
f B "sprintf" 3 581 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `265  "Data Manipulators Prototypes:"
v L "address" 3 584 "*int8" `270 
v L "bytes" 3 584 "int8" `271 
v L "value" 3 584 "int8" `272 
f B "shift_left" 3 584 "int8(*int8 address,int8 bytes,int8 value)" `269 
v L "address" 3 585 "*int8" `274 
v L "bytes" 3 585 "int8" `275 
v L "value" 3 585 "int8" `276 
f B "shift_right" 3 585 "int8(*int8 address,int8 bytes,int8 value)" `273 
v L "address" 3 586 "*int8" `278 
v L "bytes" 3 586 "int8" `279 
f B "rotate_left" 3 586 "void(*int8 address,int8 bytes)" `277 
v L "address" 3 587 "*int8" `281 
v L "bytes" 3 587 "int8" `282 
f B "rotate_right" 3 587 "void(*int8 address,int8 bytes)" `280 
v L "value" 3 588 "int8" `284 
f B "swap" 3 588 "void(int8 value)" `283 
v L "var" 3 589 "int16" `286 
v L "offset" 3 589 "int8" `287 
f B "make8" 3 589 "int8(int16 var,int8 offset)" `285 
v L "var" 3 590 "int32" `286 
v L "offset" 3 590 "int8" `290 
f G "make8" 3 590 "int8(int32 var,int8 offset)" `288 
v L "varhigh" 3 591 "int8" `292 
v L "varlow" 3 591 "int8" `293 
f B "make16" 3 591 "int16(int8 varhigh,int8 varlow)" `291 
v L "var1" 3 592 "int16" `295 
f B "make32" 3 592 "int32(int16 var1)" `294 
v L "var1" 3 593 "int16" `297 
v L "var2" 3 593 "int16" `298 
f G "make32" 3 593 "int32(int16 var1,int16 var2)" `296 
v L "var1" 3 594 "int16" `297 
v L "var2" 3 594 "int8" `301 
f G "make32" 3 594 "int32(int16 var1,int8 var2)" `299 
v L "var1" 3 595 "int16" `303 
v L "var2" 3 595 "int8" `304 
v L "var3" 3 595 "int8" `305 
f G "make32" 3 595 "int32(int16 var1,int8 var2,int8 var3)" `302 
v L "var1" 3 596 "int8" `307 
f G "make32" 3 596 "int32(int8 var1)" `306 
v L "var1" 3 597 "int8" `297 
v L "var2" 3 597 "int8" `310 
f G "make32" 3 597 "int32(int8 var1,int8 var2)" `308 
v L "var1" 3 598 "int8" `303 
v L "var2" 3 598 "int8" `304 
v L "var3" 3 598 "int8" `314 
f G "make32" 3 598 "int32(int8 var1,int8 var2,int8 var3)" `311 
v L "var1" 3 599 "int8" `316 
v L "var2" 3 599 "int8" `317 
v L "var3" 3 599 "int8" `318 
v L "var4" 3 599 "int8" `319 
f G "make32" 3 599 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `315 
v L "var1" 3 600 "int8" `297 
v L "var2" 3 600 "int16" `322 
f G "make32" 3 600 "int32(int8 var1,int16 var2)" `320 
v L "var1" 3 601 "int8" `303 
v L "var2" 3 601 "int16" `304 
v L "var3" 3 601 "int8" `326 
f G "make32" 3 601 "int32(int8 var1,int16 var2,int8 var3)" `323 
v L "var1" 3 602 "int8" `303 
v L "var2" 3 602 "int8" `304 
v L "var3" 3 602 "int16" `330 
f G "make32" 3 602 "int32(int8 var1,int8 var2,int16 var3)" `327 
v L "var" 3 603 "int8" `332 
v L "bit" 3 603 "int8" `333 
f B "bit_set" 3 603 "void(int8 var,int8 bit)" `331 
v L "var" 3 604 "int16" `332 
v L "bit" 3 604 "int8" `336 
f G "bit_set" 3 604 "void(int16 var,int8 bit)" `334 
v L "var" 3 605 "int32" `332 
v L "bit" 3 605 "int8" `339 
f G "bit_set" 3 605 "void(int32 var,int8 bit)" `337 
v L "var" 3 606 "int8" `341 
v L "bit" 3 606 "int8" `342 
f B "bit_clear" 3 606 "void(int8 var,int8 bit)" `340 
v L "var" 3 607 "int16" `341 
v L "bit" 3 607 "int8" `345 
f G "bit_clear" 3 607 "void(int16 var,int8 bit)" `343 
v L "var" 3 608 "int32" `341 
v L "bit" 3 608 "int8" `348 
f G "bit_clear" 3 608 "void(int32 var,int8 bit)" `346 
v L "var" 3 609 "int8" `350 
v L "bit" 3 609 "int8" `351 
f B "bit_test" 3 609 "int8(int8 var,int8 bit)" `349 
v L "var" 3 610 "int16" `350 
v L "bit" 3 610 "int8" `354 
f G "bit_test" 3 610 "int8(int16 var,int8 bit)" `352 
v L "var" 3 611 "int32" `350 
v L "bit" 3 611 "int8" `357 
f G "bit_test" 3 611 "int8(int32 var,int8 bit)" `355  "#use delay() Prototypes:"
v L "count" 3 614 "int8" `359 
f B "delay_cycles" 3 614 "void(int8 count)" `358 
v L "time" 3 615 "int16" `361 
f B "delay_ms" 3 615 "void(int16 time)" `360 
v L "time" 3 616 "int16" `363 
f B "delay_us" 3 616 "void(int16 time)" `362  "#use rs232() Prototypes:"
v L "cdata" 3 619 "int8" `365 
f B "putchar" 3 619 "void(int8 cdata)" `364 
v L "cdata" 3 620 "int8" `367 
v L "stream" 3 620 "int8" `368 
f G "putchar" 3 620 "void(int8 cdata,int8 stream)" `366 
v L "string" 3 621 "*int8" `370 
f B "puts" 3 621 "void(*int8 string)" `369 
v L "string" 3 622 "*int8" `372 
v L "stream" 3 622 "int8" `373 
f G "puts" 3 622 "void(*int8 string,int8 stream)" `371 
f B "getch" 3 623 "int8()" `374 
v L "stream" 3 624 "int8" `376 
f G "getch" 3 624 "int8(int8 stream)" `375 
v L "string" 3 625 "*int8" `378 
f B "gets" 3 625 "void(*int8 string)" `377 
v L "string" 3 626 "*int8" `380 
v L "stream" 3 626 "int8" `381 
f G "gets" 3 626 "void(*int8 string,int8 stream)" `379 
f B "kbhit" 3 627 "int8()" `382 
v L "stream" 3 628 "int8" `384 
f G "kbhit" 3 628 "int8(int8 stream)" `383 
v L "string" 3 629 "*int8" `386 
f B "printf" 3 629 "void(*int8 string,*int8 _VA_LIST)" `385 
v L "stream" 3 630 "int8" `389 
v L "string" 3 630 "*int8" `390 
f B "fprintf" 3 630 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `388 
f B "putc_send" 3 631 "void()" `392 
v L "stream" 3 632 "int8" `394 
f B "fputc_send" 3 632 "void(int8 stream)" `393 
f B "rcv_buffer_full" 3 633 "int8()" `395 
v L "stream" 3 634 "int8" `397 
f G "rcv_buffer_full" 3 634 "int8(int8 stream)" `396 
f B "rcv_buffer_bytes" 3 635 "int16()" `398 
v L "stream" 3 636 "int8" `400 
f G "rcv_buffer_bytes" 3 636 "int16(int8 stream)" `399 
f B "tx_buffer_full" 3 637 "int8()" `401 
v L "stream" 3 638 "int8" `403 
f G "tx_buffer_full" 3 638 "int8(int8 stream)" `402 
f B "tx_buffer_bytes" 3 639 "int16()" `404 
v L "stream" 3 640 "int8" `406 
f G "tx_buffer_bytes" 3 640 "int16(int8 stream)" `405  "#use i2c() Prototypes:"
f B "i2c_read" 3 643 "int8()" `407 
v L "stream" 3 644 "int8" `409 
f G "i2c_read" 3 644 "int8(int8 stream)" `408 
v L "stream" 3 645 "int8" `411 
v L "ack" 3 645 "int8" `412 
f G "i2c_read" 3 645 "int8(int8 stream,int8 ack)" `410 
v L "data" 3 646 "int8" `414 
f B "i2c_write" 3 646 "int8(int8 data)" `413 
v L "stream" 3 647 "int8" `416 
v L "data" 3 647 "int8" `417 
f G "i2c_write" 3 647 "int8(int8 stream,int8 data)" `415 
f B "i2c_start" 3 648 "void()" `418 
v L "stream" 3 649 "int8" `420 
f G "i2c_start" 3 649 "void(int8 stream)" `419 
v L "stream" 3 650 "int8" `422 
v L "restart" 3 650 "int8" `423 
f G "i2c_start" 3 650 "void(int8 stream,int8 restart)" `421 
f B "i2c_stop" 3 651 "void()" `424 
v L "stream" 3 652 "int8" `426 
f G "i2c_stop" 3 652 "void(int8 stream)" `425 
f B "i2c_isr_state" 3 653 "int8()" `427 
v L "addr" 3 654 "int8" `429 
f B "i2c_slaveaddr" 3 654 "void(int8 addr)" `428 
v L "stream" 3 655 "int8" `431 
v L "addr" 3 655 "int8" `432 
f G "i2c_slaveaddr" 3 655 "void(int8 stream,int8 addr)" `430 
f B "i2c_poll" 3 656 "int8()" `433 
v L "stream" 3 657 "int8" `435 
f G "i2c_poll" 3 657 "int8(int8 stream)" `434 
v L "baud" 3 658 "int32" `437 
f B "i2c_init" 3 658 "void(int32 baud)" `436 
v L "stream" 3 659 "int8" `439 
v L "baud" 3 659 "int32" `440 
f G "i2c_init" 3 659 "void(int8 stream,int32 baud)" `438  "#use spi() Prototypes:"
f B "spi_xfer" 3 662 "int8()" `441 
f G "spi_xfer" 3 663 "int16()" `442 
f G "spi_xfer" 3 664 "int32()" `443 
v L "data" 3 665 "int8" `445 
f G "spi_xfer" 3 665 "int8(int8 data)" `444 
v L "data" 3 666 "int16" `447 
f G "spi_xfer" 3 666 "int16(int16 data)" `446 
v L "data" 3 667 "int32" `449 
f G "spi_xfer" 3 667 "int32(int32 data)" `448 
v L "stream" 3 668 "int8" `451 
v L "data" 3 668 "int8" `452 
f G "spi_xfer" 3 668 "int8(int8 stream,int8 data)" `450 
v L "stream" 3 669 "int8" `451 
v L "data" 3 669 "int16" `455 
f G "spi_xfer" 3 669 "int16(int8 stream,int16 data)" `453 
v L "stream" 3 670 "int8" `451 
v L "data" 3 670 "int32" `458 
f G "spi_xfer" 3 670 "int32(int8 stream,int32 data)" `456 
v L "stream" 3 671 "int8" `460 
v L "data" 3 671 "int8" `461 
v L "bits" 3 671 "int8" `462 
f G "spi_xfer" 3 671 "int8(int8 stream,int8 data,int8 bits)" `459 
v L "stream" 3 672 "int8" `460 
v L "data" 3 672 "int16" `461 
v L "bits" 3 672 "int8" `466 
f G "spi_xfer" 3 672 "int16(int8 stream,int16 data,int8 bits)" `463 
v L "stream" 3 673 "int8" `460 
v L "data" 3 673 "int32" `461 
v L "bits" 3 673 "int8" `470 
f G "spi_xfer" 3 673 "int32(int8 stream,int32 data,int8 bits)" `467 
v L "baud" 3 674 "int32" `472 
f B "spi_init" 3 674 "void(int32 baud)" `471 
v L "stream" 3 675 "int8" `474 
v L "baud" 3 675 "int32" `475 
f G "spi_init" 3 675 "void(int8 stream,int32 baud)" `473 
v L "baud" 3 676 "int32" `477 
f B "spi_speed" 3 676 "void(int32 baud)" `476 
v L "stream" 3 677 "int8" `479 
v L "baud" 3 677 "int32" `480 
f G "spi_speed" 3 677 "void(int8 stream,int32 baud)" `478 
v L "stream" 3 678 "int8" `482 
v L "baud" 3 678 "int32" `483 
v L "clock" 3 678 "int32" `484 
f G "spi_speed" 3 678 "void(int8 stream,int32 baud,int32 clock)" `481 
v L "data" 3 679 "int8" `486 
f B "spi_prewrite" 3 679 "void(int8 data)" `485 
v L "data" 3 680 "int16" `488 
f G "spi_prewrite" 3 680 "void(int16 data)" `487 
v L "data" 3 681 "int32" `490 
f G "spi_prewrite" 3 681 "void(int32 data)" `489 
v L "??65535" 3 682 "int8" `492 
v L "data" 3 682 "int8" `493 
f G "spi_prewrite" 3 682 "void(int8 ,int8 data)" `491 
v L "??65535" 3 683 "int8" `492 
v L "data" 3 683 "int16" `496 
f G "spi_prewrite" 3 683 "void(int8 ,int16 data)" `494 
v L "??65535" 3 684 "int8" `492 
v L "data" 3 684 "int32" `499 
f G "spi_prewrite" 3 684 "void(int8 ,int32 data)" `497 
f B "spi_xfer_in" 3 685 "int8()" `500 
f G "spi_xfer_in" 3 686 "int16()" `501 
f G "spi_xfer_in" 3 687 "int32()" `502 
v L "bits" 3 688 "int8" `504 
f G "spi_xfer_in" 3 688 "int8(int8 bits)" `503 
v L "bits" 3 689 "int8" `506 
f G "spi_xfer_in" 3 689 "int16(int8 bits)" `505 
v L "bits" 3 690 "int8" `508 
f G "spi_xfer_in" 3 690 "int32(int8 bits)" `507 
v L "stream" 3 691 "int8" `510 
v L "bits" 3 691 "int8" `511 
f G "spi_xfer_in" 3 691 "int8(int8 stream,int8 bits)" `509 
v L "stream" 3 692 "int8" `510 
v L "bits" 3 692 "int8" `514 
f G "spi_xfer_in" 3 692 "int16(int8 stream,int8 bits)" `512 
v L "stream" 3 693 "int8" `510 
v L "bits" 3 693 "int8" `517 
f G "spi_xfer_in" 3 693 "int32(int8 stream,int8 bits)" `515  "#use rtos() Prototypes:"
f B "rtos_run" 3 696 "void()" `518 
f B "rtos_yield" 3 697 "void()" `519 
v L "task" 3 698 "int8" `521 
f B "rtos_enable" 3 698 "void(int8 task)" `520 
v L "task" 3 699 "int8" `523 
f B "rtos_disable" 3 699 "void(int8 task)" `522 
f B "rtos_terminate" 3 700 "void()" `524 
v L "flag" 3 701 "int8" `526 
f B "rtos_await" 3 701 "void(int8 flag)" `525 
v L "sem" 3 702 "int8" `528 
f B "rtos_wait" 3 702 "void(int8 sem)" `527 
v L "sem" 3 703 "int8" `530 
f B "rtos_signal" 3 703 "void(int8 sem)" `529 
v L "task" 3 704 "int8" `532 
v L "msg" 3 704 "int8" `533 
f B "rtos_msg_send" 3 704 "void(int8 task,int8 msg)" `531 
f B "rtos_msg_read" 3 705 "int8()" `534 
f B "rtos_msg_poll" 3 706 "int8()" `535 
v L "task" 3 707 "int8" `537 
f B "rtos_overrun" 3 707 "int8(int8 task)" `536 
v L "task" 3 708 "int8" `539 
v L "stat" 3 708 "*int8" `540 
f B "rtos_stats" 3 708 "void(int8 task,*int8 stat)" `538  "#use timer() Prototypes:"
f B "get_ticks" 3 711 "int8()" `541 
f G "get_ticks" 3 712 "int16()" `542 
f G "get_ticks" 3 713 "int32()" `543 
v L "stream" 3 714 "int8" `545 
f G "get_ticks" 3 714 "int8(int8 stream)" `544 
v L "stream" 3 715 "int8" `547 
f G "get_ticks" 3 715 "int16(int8 stream)" `546 
v L "stream" 3 716 "int8" `549 
f G "get_ticks" 3 716 "int32(int8 stream)" `548 
v L "value" 3 717 "int8" `551 
f B "set_ticks" 3 717 "void(int8 value)" `550 
v L "value" 3 718 "int16" `553 
f G "set_ticks" 3 718 "void(int16 value)" `552 
v L "value" 3 719 "int32" `555 
f G "set_ticks" 3 719 "void(int32 value)" `554 
v L "stream" 3 720 "int8" `557 
v L "value" 3 720 "int8" `558 
f G "set_ticks" 3 720 "void(int8 stream,int8 value)" `556 
v L "stream" 3 721 "int8" `557 
v L "value" 3 721 "int16" `561 
f G "set_ticks" 3 721 "void(int8 stream,int16 value)" `559 
v L "stream" 3 722 "int8" `557 
v L "value" 3 722 "int32" `564 
f G "set_ticks" 3 722 "void(int8 stream,int32 value)" `562  "#use pwm() Prototypes:"
f B "pwm_on" 3 725 "void()" `565 
v L "stream" 3 726 "int8" `567 
f G "pwm_on" 3 726 "void(int8 stream)" `566 
f B "pwm_off" 3 727 "void()" `568 
v L "stream" 3 728 "int8" `570 
f G "pwm_off" 3 728 "void(int8 stream)" `569 
v L "duty" 3 729 "int16" `572 
f B "pwm_set_duty" 3 729 "void(int16 duty)" `571 
v L "stream" 3 730 "int8" `574 
v L "duty" 3 730 "int16" `575 
f G "pwm_set_duty" 3 730 "void(int8 stream,int16 duty)" `573 
v L "percent" 3 731 "int16" `577 
f B "pwm_set_duty_percent" 3 731 "void(int16 percent)" `576 
v L "stream" 3 732 "int8" `579 
v L "percent" 3 732 "int16" `580 
f G "pwm_set_duty_percent" 3 732 "void(int8 stream,int16 percent)" `578 
v L "frequency" 3 733 "int32" `582 
f B "pwm_set_frequency" 3 733 "void(int32 frequency)" `581 
v L "stream" 3 734 "int8" `584 
v L "frequency" 3 734 "int32" `585 
f G "pwm_set_frequency" 3 734 "void(int8 stream,int32 frequency)" `583  "#use capture() Prototypes:"
f B "get_capture_time" 3 737 "int16()" `586 
v L "stream" 3 738 "int8" `588 
f G "get_capture_time" 3 738 "int16(int8 stream)" `587 
f B "get_capture_event" 3 739 "int8()" `589 
v L "stream" 3 740 "int8" `591 
f G "get_capture_event" 3 740 "int8(int8 stream)" `590  "Enviroment Prototypes:"
c L "get_capture_event" 3 1 2 "FUNCTION"
v L "address" 3 753 "int16" `593 
f B "goto_address" 3 753 "void(int16 address)" `592 
v L "label" 3 754 "int16" `595 
f B "label_address" 3 754 "int16(int16 label)" `594  "Program Memory Prototypes:"
v L "address" 3 757 "int16" `597 
v L "dataptr" 3 757 "*int8" `598 
v L "count" 3 757 "int16" `599 
f B "read_program_memory" 3 757 "void(int16 address,*int8 dataptr,int16 count)" `596 
v L "address" 3 758 "int16" `601 
f B "read_program_eeprom" 3 758 "int16(int16 address)" `600 
v L "address" 3 759 "int16" `603 
f B "erase_program_eeprom" 3 759 "void(int16 address)" `602 
v L "address" 3 760 "int16" `605 
v L "dataptr" 3 760 "*int8" `606 
v L "count" 3 760 "int16" `607 
f B "write_program_memory" 3 760 "void(int16 address,*int8 dataptr,int16 count)" `604 
v L "address" 3 761 "int16" `609 
v L "data" 3 761 "int16" `610 
f B "write_program_eeprom" 3 761 "void(int16 address,int16 data)" `608  "EEPROM Prototypes:"
t G "__EEADDRESS__" 3 766 "int16" `611 
v L "address" 3 771 "__EEADDRESS__" `613 
f B "read_eeprom" 3 771 "int8(__EEADDRESS__ address)" `612 
v L "address" 3 772 "__EEADDRESS__" `615 
v L "value" 3 772 "int8" `616 
f B "write_eeprom" 3 772 "void(__EEADDRESS__ address,int8 value)" `614  "INT"
c L "write_eeprom" 3 1 4 "FUNCTION"
v L "interrupt" 3 779 "int32" `618 
f B "enable_interrupts" 3 779 "void(int32 interrupt)" `617 
v L "interrupt" 3 780 "int32" `620 
f B "disable_interrupts" 3 780 "void(int32 interrupt)" `619 
v L "interrupt" 3 781 "int32" `622 
f B "clear_interrupt" 3 781 "void(int32 interrupt)" `621 
v L "interrupt" 3 782 "int32" `624 
f B "interrupt_active" 3 782 "int8(int32 interrupt)" `623 
v L "source" 3 783 "int8" `626 
v L "edge" 3 783 "int8" `627 
f B "ext_int_edge" 3 783 "void(int8 source,int8 edge)" `625 
v L "address" 3 784 "int16" `629 
f B "jump_to_irs" 3 784 "void(int16 address)" `628  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 3 786 "0x40"
d G "H_TO_L" 3 787 "0"
d G "GLOBAL" 3 789 "0xF2C0"
d G "PERIPH" 3 790 "0xF240"
d G "INT_RTCC" 3 791 "0x00F220"
d G "INT_TIMER0" 3 792 "0x00F220"
d G "INT_TIMER1" 3 793 "0x009D01"
d G "INT_TIMER2" 3 794 "0x009D02"
d G "INT_TIMER3" 3 795 "0x00A002"
d G "INT_EXT_L2H" 3 796 "0x5000F210"
d G "INT_EXT_H2L" 3 797 "0x6000F210"
d G "INT_EXT" 3 798 "0x00F210"
d G "INT_EXT1_L2H" 3 799 "0x5001F008"
d G "INT_EXT1_H2L" 3 800 "0x6001F008"
d G "INT_EXT1" 3 801 "0x00F008"
d G "INT_EXT2_L2H" 3 802 "0x5002F010"
d G "INT_EXT2_H2L" 3 803 "0x6002F010"
d G "INT_EXT2" 3 804 "0x00F010"
d G "INT_RB" 3 805 "0x00FFF208"
d G "INT_AD" 3 806 "0x009D40"
d G "INT_RDA" 3 807 "0x009D20"
d G "INT_TBE" 3 808 "0x009D10"
d G "INT_SSP" 3 809 "0x009D08"
d G "INT_CCP1" 3 810 "0x009D04"
d G "INT_CCP2" 3 811 "0x00A001"
d G "INT_BUSCOL" 3 812 "0x00A008"
d G "INT_LOWVOLT" 3 813 "0x00A004"
d G "INT_COMP" 3 814 "0x00A040"
d G "INT_EEPROM" 3 815 "0x00A010"
d G "INT_OSCF" 3 816 "0x00A080"
d G "INT_SPP" 3 817 "0x009D80"
d G "INT_USB" 3 818 "0x00A020"
D G "LOADER_END" 2 15 "0x7FF"
D G "LOADER_SIZE" 2 16 "0x6FF"
C L "jump_to_irs" 2 11 5 "FUNCTION"
F G "M1_A" 2 30 "void()" `630 
F G "M1_H" 2 36 "void()" `631 
F G "M1_P" 2 42 "void()" `632 
F G "M2_A" 2 48 "void()" `633 
F G "M2_H" 2 54 "void()" `634 
F G "M2_P" 2 60 "void()" `635 
F G "M3_A" 2 66 "void()" `636 
F G "M3_H" 2 72 "void()" `637 
F G "M3_P" 2 78 "void()" `638 
F G "M4_A" 2 84 "void()" `639 
F G "M4_H" 2 90 "void()" `640 
F G "M4_P" 2 96 "void()" `641 
D G "P2" 2 107 " (!input(PIN_B4))"
D G "led_on" 2 113 "()   output_high(PIN_A5)"
D G "led_off" 2 114 "()   output_low(PIN_A5)"
D G "ES0" 2 120 "PIN_A4"
D G "ES1" 2 121 "PIN_B3"
D G "ES2" 2 122 "PIN_B5"
D G "ES3" 2 123 "PIN_B6"
D G "ES4" 2 124 "PIN_B7"
D G "ES5" 2 125 "PIN_C7"
D G "ES6" 2 126 "PIN_C6"
D G "ES7" 2 127 "PIN_C1"
D G "ES8" 2 128 "PIN_C0"
D G "IN1" 2 134 "input(PIN_D0)"
D G "IN2" 2 135 "input(PIN_D1)"
D G "IN3" 2 136 "input(PIN_D2)"
D G "IN4" 2 137 "input(PIN_D3)"
D G "IN5" 2 138 "input(PIN_D4)"
D G "_SRF02_" 4 3 ""
D G "SRF02W" 4 5 "0xE0"
D G "COMMAND" 4 6 "0"
D G "SRF02R" 4 7 "0xE1"
D G "MEASUREH" 4 8 "2"
D G "MEASUREL" 4 9 "3"
F G "srf_measure_cm" 4 12 "int16()" `650 
V L "m" 4 13 "int16" `651 
V L "m2" 4 13 "int16" `652 
F G "srf_measure_in" 4 45 "int16()" `653 
V L "m" 4 46 "int16" `654 
V L "m2" 4 46 "int16" `655 
F G "srf_measure_us" 4 78 "int16()" `656 
V L "m" 4 79 "int16" `657 
V L "m2" 4 79 "int16" `658 
F G "srf_false_measure_cm" 4 111 "int16()" `659 
V L "m" 4 112 "int16" `660 
V L "m2" 4 112 "int16" `661 
F G "srf_false_measure_in" 4 144 "int16()" `662 
V L "m" 4 145 "int16" `663 
V L "m2" 4 145 "int16" `664 
F G "srf_false_measure_us" 4 177 "int16()" `665 
V L "m" 4 178 "int16" `666 
V L "m2" 4 178 "int16" `667 
F G "srf_burst" 4 210 "void()" `668 
F G "DELANTE" 1 8 "void()" `673 
F G "ATRAS" 1 13 "void()" `674 
F G "PARAR" 1 18 "void()" `675 
F G "DISPARAR" 1 23 "void()" `676 
F G "RECOGER" 1 28 "void()" `677 
F G "IMPACTO" 1 33 "void()" `678 
V L "t" 1 44 "int16" `680 
F G "DERECHA" 1 44 "void(int16 t)" `679 
V L "t" 1 54 "int16" `682 
F G "IZQUIERDA" 1 54 "void(int16 t)" `681 
V L "dist" 1 64 "int8" `684 
F G "ULTRA_SONIDOS" 1 64 "int8(int8 dist)" `683 
F G "MAIN" 0 4 "void()" `689 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
