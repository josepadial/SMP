CCS PCH C Compiler, Version 5.008, 5967               13-jun.-19 18:56

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\i2c\2srf02\main.lst

               ROM used:   840 bytes (3%)
                           Largest free fragment is 29876
               RAM used:   5 (0%) at main() level
                           12 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0800:  GOTO   0AF4
.................... #include "mismov.h" 
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h" 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
*
0830:  BCF    F92.1
0832:  BSF    F89.1
....................    output_low(PIN_D7); 
0834:  BCF    F95.7
0836:  BCF    F8C.7
....................    output_high(PIN_D6); 
0838:  BCF    F95.6
083A:  BSF    F8C.6
083C:  GOTO   0852 (RETURN)
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
0840:  BCF    F92.0
0842:  BSF    F89.0
....................    output_low(PIN_C2); 
0844:  BCF    F94.2
0846:  BCF    F8B.2
....................    output_high(PIN_D5); 
0848:  BCF    F95.5
084A:  BSF    F8C.5
084C:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
*
0882:  MOVLW  08
0884:  MOVWF  01
0886:  NOP   
0888:  BCF    F8A.1
088A:  BCF    F93.1
088C:  NOP   
088E:  RLCF   0A,F
0890:  BCF    F8A.0
0892:  BTFSC  FD8.0
0894:  BSF    F93.0
0896:  BTFSS  FD8.0
0898:  BCF    F93.0
089A:  BSF    F93.1
089C:  BTFSS  F81.1
089E:  BRA    089C
08A0:  DECFSZ 01,F
08A2:  BRA    0886
08A4:  NOP   
08A6:  BCF    F8A.1
08A8:  BCF    F93.1
08AA:  NOP   
08AC:  BSF    F93.0
08AE:  NOP   
08B0:  NOP   
08B2:  BSF    F93.1
08B4:  BTFSS  F81.1
08B6:  BRA    08B4
08B8:  CLRF   01
08BA:  NOP   
08BC:  BTFSC  F81.0
08BE:  BSF    01.0
08C0:  BCF    F8A.1
08C2:  BCF    F93.1
08C4:  BCF    F8A.0
08C6:  BCF    F93.0
08C8:  RETURN 0
*
08F4:  MOVLW  08
08F6:  MOVWF  0B
08F8:  MOVFF  00,0C
08FC:  BSF    F93.0
08FE:  NOP   
0900:  BSF    F93.1
0902:  BTFSS  F81.1
0904:  BRA    0902
0906:  BTFSC  F81.0
0908:  BSF    FD8.0
090A:  BTFSS  F81.0
090C:  BCF    FD8.0
090E:  RLCF   01,F
0910:  NOP   
0912:  BCF    F93.1
0914:  BCF    F8A.1
0916:  DECFSZ 0B,F
0918:  BRA    08FC
091A:  BSF    F93.0
091C:  NOP   
091E:  BCF    F8A.0
0920:  MOVF   0C,W
0922:  BTFSS  FD8.2
0924:  BCF    F93.0
0926:  NOP   
0928:  BSF    F93.1
092A:  BTFSS  F81.1
092C:  BRA    092A
092E:  NOP   
0930:  BCF    F8A.1
0932:  BCF    F93.1
0934:  NOP   
0936:  BCF    F8A.0
0938:  BCF    F93.0
093A:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include "srf02.h" 
....................  
.................... #ifndef _SRF02_ 
.................... #define _SRF02_ 
....................  
.................... #define SRF02W 0xE0 
.................... #define COMMAND 0 
.................... #define SRF02R 0xE1 
.................... #define MEASUREH 2 
.................... #define MEASUREL 3 
.................... #use delay (clock=48000000) 
*
08CA:  CLRF   FEA
08CC:  MOVLW  0A
08CE:  MOVWF  FE9
08D0:  MOVF   FEF,W
08D2:  BZ    08F0
08D4:  MOVLW  0F
08D6:  MOVWF  01
08D8:  CLRF   00
08DA:  DECFSZ 00,F
08DC:  BRA    08DA
08DE:  DECFSZ 01,F
08E0:  BRA    08D8
08E2:  MOVLW  8F
08E4:  MOVWF  00
08E6:  DECFSZ 00,F
08E8:  BRA    08E6
08EA:  NOP   
08EC:  DECFSZ FEF,F
08EE:  BRA    08D4
08F0:  GOTO   09BE (RETURN)
....................  
.................... unsigned int16 srf_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
093C:  BSF    F93.0
093E:  MOVLW  11
0940:  MOVWF  00
0942:  DECFSZ 00,F
0944:  BRA    0942
0946:  BSF    F93.1
0948:  MOVLW  11
094A:  MOVWF  00
094C:  DECFSZ 00,F
094E:  BRA    094C
0950:  BCF    F8A.0
0952:  BCF    F93.0
0954:  MOVLW  11
0956:  MOVWF  00
0958:  DECFSZ 00,F
095A:  BRA    0958
095C:  BCF    F8A.1
095E:  BCF    F93.1
....................    delay_us(50); 
0960:  MOVLW  C7
0962:  MOVWF  00
0964:  DECFSZ 00,F
0966:  BRA    0964
0968:  BRA    096A
....................    i2c_write(SRF02W); 
096A:  MOVLW  E0
096C:  MOVWF  0A
096E:  RCALL  0882
....................    delay_us(50); 
0970:  MOVLW  C7
0972:  MOVWF  00
0974:  DECFSZ 00,F
0976:  BRA    0974
0978:  BRA    097A
....................    i2c_write(COMMAND); 
097A:  CLRF   0A
097C:  RCALL  0882
....................    delay_us(50); 
097E:  MOVLW  C7
0980:  MOVWF  00
0982:  DECFSZ 00,F
0984:  BRA    0982
0986:  BRA    0988
....................    i2c_write(0x51); 
0988:  MOVLW  51
098A:  MOVWF  0A
098C:  RCALL  0882
....................    delay_us(50); 
098E:  MOVLW  C7
0990:  MOVWF  00
0992:  DECFSZ 00,F
0994:  BRA    0992
0996:  BRA    0998
....................    i2c_stop(); 
0998:  BCF    F93.0
099A:  NOP   
099C:  BSF    F93.1
099E:  BTFSS  F81.1
09A0:  BRA    099E
09A2:  MOVLW  11
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
09AA:  BRA    09AC
09AC:  NOP   
09AE:  BSF    F93.0
09B0:  MOVLW  11
09B2:  MOVWF  00
09B4:  DECFSZ 00,F
09B6:  BRA    09B4
....................    delay_ms(80); 
09B8:  MOVLW  50
09BA:  MOVWF  0A
09BC:  BRA    08CA
....................    i2c_start(); 
09BE:  BSF    F93.0
09C0:  MOVLW  11
09C2:  MOVWF  00
09C4:  DECFSZ 00,F
09C6:  BRA    09C4
09C8:  BSF    F93.1
09CA:  MOVLW  11
09CC:  MOVWF  00
09CE:  DECFSZ 00,F
09D0:  BRA    09CE
09D2:  BCF    F8A.0
09D4:  BCF    F93.0
09D6:  MOVLW  11
09D8:  MOVWF  00
09DA:  DECFSZ 00,F
09DC:  BRA    09DA
09DE:  BCF    F8A.1
09E0:  BCF    F93.1
....................    delay_us(50); 
09E2:  MOVLW  C7
09E4:  MOVWF  00
09E6:  DECFSZ 00,F
09E8:  BRA    09E6
09EA:  BRA    09EC
....................    i2c_write(SRF02W); 
09EC:  MOVLW  E0
09EE:  MOVWF  0A
09F0:  RCALL  0882
....................    delay_us(50); 
09F2:  MOVLW  C7
09F4:  MOVWF  00
09F6:  DECFSZ 00,F
09F8:  BRA    09F6
09FA:  BRA    09FC
....................    i2c_write(MEASUREH); 
09FC:  MOVLW  02
09FE:  MOVWF  0A
0A00:  RCALL  0882
....................    delay_us(50); 
0A02:  MOVLW  C7
0A04:  MOVWF  00
0A06:  DECFSZ 00,F
0A08:  BRA    0A06
0A0A:  BRA    0A0C
....................    i2c_start(); 
0A0C:  BSF    F93.0
0A0E:  MOVLW  11
0A10:  MOVWF  00
0A12:  DECFSZ 00,F
0A14:  BRA    0A12
0A16:  BSF    F93.1
0A18:  MOVLW  11
0A1A:  MOVWF  00
0A1C:  DECFSZ 00,F
0A1E:  BRA    0A1C
0A20:  BTFSS  F81.1
0A22:  BRA    0A20
0A24:  BCF    F8A.0
0A26:  BCF    F93.0
0A28:  MOVLW  11
0A2A:  MOVWF  00
0A2C:  DECFSZ 00,F
0A2E:  BRA    0A2C
0A30:  BCF    F8A.1
0A32:  BCF    F93.1
....................    delay_us(50); 
0A34:  MOVLW  C7
0A36:  MOVWF  00
0A38:  DECFSZ 00,F
0A3A:  BRA    0A38
0A3C:  BRA    0A3E
....................    i2c_write(SRF02R); 
0A3E:  MOVLW  E1
0A40:  MOVWF  0A
0A42:  RCALL  0882
....................    delay_us(50); 
0A44:  MOVLW  C7
0A46:  MOVWF  00
0A48:  DECFSZ 00,F
0A4A:  BRA    0A48
0A4C:  BRA    0A4E
....................    m = i2c_read(); 
0A4E:  MOVLW  01
0A50:  MOVWF  00
0A52:  RCALL  08F4
0A54:  CLRF   07
0A56:  MOVFF  01,06
....................    delay_us(50); 
0A5A:  MOVLW  C7
0A5C:  MOVWF  00
0A5E:  DECFSZ 00,F
0A60:  BRA    0A5E
0A62:  BRA    0A64
....................    m2 = i2c_read(0); 
0A64:  CLRF   00
0A66:  RCALL  08F4
0A68:  CLRF   09
0A6A:  MOVFF  01,08
....................    delay_us(50); 
0A6E:  MOVLW  C7
0A70:  MOVWF  00
0A72:  DECFSZ 00,F
0A74:  BRA    0A72
0A76:  BRA    0A78
....................    i2c_stop(); 
0A78:  BCF    F93.0
0A7A:  NOP   
0A7C:  BSF    F93.1
0A7E:  BTFSS  F81.1
0A80:  BRA    0A7E
0A82:  MOVLW  11
0A84:  MOVWF  00
0A86:  DECFSZ 00,F
0A88:  BRA    0A86
0A8A:  BRA    0A8C
0A8C:  NOP   
0A8E:  BSF    F93.0
0A90:  MOVLW  11
0A92:  MOVWF  00
0A94:  DECFSZ 00,F
0A96:  BRA    0A94
....................  
....................    m = (m << 8) | m2; 
0A98:  MOVFF  06,0B
0A9C:  CLRF   0A
0A9E:  MOVF   0A,W
0AA0:  IORWF  08,W
0AA2:  MOVWF  06
0AA4:  MOVF   0B,W
0AA6:  IORWF  09,W
0AA8:  MOVWF  07
....................    return m; 
0AAA:  MOVFF  06,01
0AAE:  MOVFF  07,02
0AB2:  GOTO   0AD2 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x50); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x52); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x57); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x56); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x58); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... void srf_burst(){ 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x5C); 
....................    delay_us(50); 
....................    i2c_stop(); 
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0858:  CLRF   FEA
085A:  MOVLW  06
085C:  MOVWF  FE9
085E:  MOVF   FEF,W
0860:  BZ    087E
0862:  MOVLW  0F
0864:  MOVWF  01
0866:  CLRF   00
0868:  DECFSZ 00,F
086A:  BRA    0868
086C:  DECFSZ 01,F
086E:  BRA    0866
0870:  MOVLW  8F
0872:  MOVWF  00
0874:  DECFSZ 00,F
0876:  BRA    0874
0878:  NOP   
087A:  DECFSZ FEF,F
087C:  BRA    0862
087E:  GOTO   0AD0 (RETURN)
....................  
.................... void DELANTE(){ 
....................    M1_A(); 
....................    M2_A(); 
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_H(); 
*
0850:  BRA    0830
....................    M2_H(); 
0852:  BRA    0840
0854:  GOTO   0B14 (RETURN)
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
....................    M2_P(); 
.................... } 
....................  
.................... void DISPARAR(){ 
....................    M3_H(); 
....................    M4_H(); 
.................... } 
....................  
.................... void RECOGER(){ 
....................    M3_A(); 
....................    M4_A(); 
.................... } 
....................  
.................... void IMPACTO(){ 
....................    DISPARAR(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(700); 
....................    RECOGER(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(500); 
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_P(); 
....................    M2_H(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_H(); 
....................    M2_P(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... int ULTRA_SONIDOS(int dist){ 
....................    set_tris_a(0x00); 
*
0AB6:  MOVLW  00
0AB8:  MOVWF  F92
....................    set_tris_b(0x13); 
0ABA:  MOVLW  13
0ABC:  MOVWF  F93
....................    set_tris_c(0x00); 
0ABE:  MOVLW  00
0AC0:  MOVWF  F94
....................    set_tris_d(0x1F); 
0AC2:  MOVLW  1F
0AC4:  MOVWF  F95
....................    set_tris_e(0x00); 
0AC6:  MOVLW  00
0AC8:  MOVWF  F96
....................     
....................    delay_ms(1); 
0ACA:  MOVLW  01
0ACC:  MOVWF  06
0ACE:  BRA    0858
....................    if(srf_measure_cm() < dist)  
0AD0:  BRA    093C
0AD2:  MOVFF  02,07
0AD6:  MOVFF  01,06
0ADA:  MOVF   07,F
0ADC:  BNZ   0AEC
0ADE:  MOVF   05,W
0AE0:  SUBWF  06,W
0AE2:  BC    0AEC
....................       return 1; 
0AE4:  MOVLW  01
0AE6:  MOVWF  01
0AE8:  BRA    0AF0
0AEA:  BRA    0AF0
....................    else 
....................       return 0; 
0AEC:  MOVLW  00
0AEE:  MOVWF  01
0AF0:  GOTO   0B1E (RETURN)
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
....................  
.................... void main() { 
*
0AF4:  CLRF   FF8
0AF6:  BCF    FD0.7
0AF8:  MOVF   FC1,W
0AFA:  ANDLW  C0
0AFC:  IORLW  0F
0AFE:  MOVWF  FC1
0B00:  MOVLW  07
0B02:  MOVWF  FB4
....................     
....................    delay_ms(3000); 
0B04:  MOVLW  0C
0B06:  MOVWF  05
0B08:  MOVLW  FA
0B0A:  MOVWF  06
0B0C:  RCALL  0808
0B0E:  DECFSZ 05,F
0B10:  BRA    0B08
....................    ATRAS(); 
0B12:  BRA    0850
....................    led_off(); 
0B14:  BCF    F92.5
0B16:  BCF    F89.5
....................    while(1){ 
....................       if(ULTRA_SONIDOS(30)){ 
0B18:  MOVLW  1E
0B1A:  MOVWF  05
0B1C:  BRA    0AB6
0B1E:  MOVF   01,F
0B20:  BZ    0B36
....................          //PARAR(); 
....................          led_on(); 
0B22:  BCF    F92.5
0B24:  BSF    F89.5
....................          delay_ms(500); 
0B26:  MOVLW  02
0B28:  MOVWF  05
0B2A:  MOVLW  FA
0B2C:  MOVWF  06
0B2E:  RCALL  0808
0B30:  DECFSZ 05,F
0B32:  BRA    0B2A
....................          //DERECHA(600); 
....................       } 
0B34:  BRA    0B3A
....................       else 
....................          led_off(); 
0B36:  BCF    F92.5
0B38:  BCF    F89.5
....................          delay_ms(500); 
0B3A:  MOVLW  02
0B3C:  MOVWF  05
0B3E:  MOVLW  FA
0B40:  MOVWF  06
0B42:  RCALL  0808
0B44:  DECFSZ 05,F
0B46:  BRA    0B3E
0B48:  BRA    0B18
....................    } 
.................... } 
0B4A:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
