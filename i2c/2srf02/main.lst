CCS PCH C Compiler, Version 5.008, 5967               31-may.-19 19:37

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\i2c\2srf02\main.lst

               ROM used:   666 bytes (2%)
                           Largest free fragment is 30050
               RAM used:   28 (1%) at main() level
                           34 (2%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0800:  GOTO   0A4C
.................... #include "tarjeta.h" 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
....................    output_high(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_low(PIN_D6); 
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
....................    output_high(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_low(PIN_D5); 
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
*
0842:  MOVLW  08
0844:  MOVWF  01
0846:  NOP   
0848:  BCF    F8A.1
084A:  BCF    F93.1
084C:  NOP   
084E:  RLCF   20,F
0850:  BCF    F8A.0
0852:  BTFSC  FD8.0
0854:  BSF    F93.0
0856:  BTFSS  FD8.0
0858:  BCF    F93.0
085A:  BSF    F93.1
085C:  BTFSS  F81.1
085E:  BRA    085C
0860:  DECFSZ 01,F
0862:  BRA    0846
0864:  NOP   
0866:  BCF    F8A.1
0868:  BCF    F93.1
086A:  NOP   
086C:  BSF    F93.0
086E:  NOP   
0870:  NOP   
0872:  BSF    F93.1
0874:  BTFSS  F81.1
0876:  BRA    0874
0878:  CLRF   01
087A:  NOP   
087C:  BTFSC  F81.0
087E:  BSF    01.0
0880:  BCF    F8A.1
0882:  BCF    F93.1
0884:  BCF    F8A.0
0886:  BCF    F93.0
0888:  RETURN 0
088A:  MOVLW  08
088C:  MOVWF  21
088E:  MOVFF  00,22
0892:  BSF    F93.0
0894:  NOP   
0896:  BSF    F93.1
0898:  BTFSS  F81.1
089A:  BRA    0898
089C:  BTFSC  F81.0
089E:  BSF    FD8.0
08A0:  BTFSS  F81.0
08A2:  BCF    FD8.0
08A4:  RLCF   01,F
08A6:  NOP   
08A8:  BCF    F93.1
08AA:  BCF    F8A.1
08AC:  DECFSZ 21,F
08AE:  BRA    0892
08B0:  BSF    F93.0
08B2:  NOP   
08B4:  BCF    F8A.0
08B6:  MOVF   22,W
08B8:  BTFSS  FD8.2
08BA:  BCF    F93.0
08BC:  NOP   
08BE:  BSF    F93.1
08C0:  BTFSS  F81.1
08C2:  BRA    08C0
08C4:  NOP   
08C6:  BCF    F8A.1
08C8:  BCF    F93.1
08CA:  NOP   
08CC:  BCF    F8A.0
08CE:  BCF    F93.0
08D0:  RETURN 0
....................  
.................... #endif 
....................  
.................... #use delay(clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  20
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  RETURN 0
.................... #include "srf02.h" 
....................  
.................... #ifndef _SRF02_ 
.................... #define _SRF02_ 
....................  
.................... #define SRF02W 0xE0 
.................... #define COMMAND 0 
.................... #define SRF02R 0xE1 
.................... #define MEASUREH 2 
.................... #define MEASUREL 3 
....................  
.................... unsigned int16 srf_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
*
08D2:  BSF    F93.0
08D4:  MOVLW  11
08D6:  MOVWF  00
08D8:  DECFSZ 00,F
08DA:  BRA    08D8
08DC:  BSF    F93.1
08DE:  MOVLW  11
08E0:  MOVWF  00
08E2:  DECFSZ 00,F
08E4:  BRA    08E2
08E6:  BCF    F8A.0
08E8:  BCF    F93.0
08EA:  MOVLW  11
08EC:  MOVWF  00
08EE:  DECFSZ 00,F
08F0:  BRA    08EE
08F2:  BCF    F8A.1
08F4:  BCF    F93.1
.................... 	delay_us(50); 
08F6:  MOVLW  C7
08F8:  MOVWF  00
08FA:  DECFSZ 00,F
08FC:  BRA    08FA
08FE:  BRA    0900
.................... 	i2c_write(SRF02W); 
0900:  MOVLW  E0
0902:  MOVWF  20
0904:  RCALL  0842
.................... 	delay_us(50); 
0906:  MOVLW  C7
0908:  MOVWF  00
090A:  DECFSZ 00,F
090C:  BRA    090A
090E:  BRA    0910
.................... 	i2c_write(COMMAND); 
0910:  CLRF   20
0912:  RCALL  0842
.................... 	delay_us(50); 
0914:  MOVLW  C7
0916:  MOVWF  00
0918:  DECFSZ 00,F
091A:  BRA    0918
091C:  BRA    091E
.................... 	i2c_write(0x51); 
091E:  MOVLW  51
0920:  MOVWF  20
0922:  RCALL  0842
.................... 	delay_us(50); 
0924:  MOVLW  C7
0926:  MOVWF  00
0928:  DECFSZ 00,F
092A:  BRA    0928
092C:  BRA    092E
.................... 	i2c_stop(); 
092E:  BCF    F93.0
0930:  NOP   
0932:  BSF    F93.1
0934:  BTFSS  F81.1
0936:  BRA    0934
0938:  MOVLW  11
093A:  MOVWF  00
093C:  DECFSZ 00,F
093E:  BRA    093C
0940:  BRA    0942
0942:  NOP   
0944:  BSF    F93.0
0946:  MOVLW  11
0948:  MOVWF  00
094A:  DECFSZ 00,F
094C:  BRA    094A
.................... 	delay_ms(80); 
094E:  MOVLW  50
0950:  MOVWF  20
0952:  RCALL  0808
.................... 	i2c_start(); 
0954:  BSF    F93.0
0956:  MOVLW  11
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
095E:  BSF    F93.1
0960:  MOVLW  11
0962:  MOVWF  00
0964:  DECFSZ 00,F
0966:  BRA    0964
0968:  BCF    F8A.0
096A:  BCF    F93.0
096C:  MOVLW  11
096E:  MOVWF  00
0970:  DECFSZ 00,F
0972:  BRA    0970
0974:  BCF    F8A.1
0976:  BCF    F93.1
.................... 	delay_us(50); 
0978:  MOVLW  C7
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
.................... 	i2c_write(SRF02W); 
0982:  MOVLW  E0
0984:  MOVWF  20
0986:  RCALL  0842
.................... 	delay_us(50); 
0988:  MOVLW  C7
098A:  MOVWF  00
098C:  DECFSZ 00,F
098E:  BRA    098C
0990:  BRA    0992
.................... 	i2c_write(MEASUREH); 
0992:  MOVLW  02
0994:  MOVWF  20
0996:  RCALL  0842
.................... 	delay_us(50); 
0998:  MOVLW  C7
099A:  MOVWF  00
099C:  DECFSZ 00,F
099E:  BRA    099C
09A0:  BRA    09A2
.................... 	i2c_start(); 
09A2:  BSF    F93.0
09A4:  MOVLW  11
09A6:  MOVWF  00
09A8:  DECFSZ 00,F
09AA:  BRA    09A8
09AC:  BSF    F93.1
09AE:  MOVLW  11
09B0:  MOVWF  00
09B2:  DECFSZ 00,F
09B4:  BRA    09B2
09B6:  BTFSS  F81.1
09B8:  BRA    09B6
09BA:  BCF    F8A.0
09BC:  BCF    F93.0
09BE:  MOVLW  11
09C0:  MOVWF  00
09C2:  DECFSZ 00,F
09C4:  BRA    09C2
09C6:  BCF    F8A.1
09C8:  BCF    F93.1
.................... 	delay_us(50); 
09CA:  MOVLW  C7
09CC:  MOVWF  00
09CE:  DECFSZ 00,F
09D0:  BRA    09CE
09D2:  BRA    09D4
.................... 	i2c_write(SRF02R); 
09D4:  MOVLW  E1
09D6:  MOVWF  20
09D8:  RCALL  0842
.................... 	delay_us(50); 
09DA:  MOVLW  C7
09DC:  MOVWF  00
09DE:  DECFSZ 00,F
09E0:  BRA    09DE
09E2:  BRA    09E4
.................... 	m = i2c_read(); 
09E4:  MOVLW  01
09E6:  MOVWF  00
09E8:  RCALL  088A
09EA:  CLRF   1D
09EC:  MOVFF  01,1C
.................... 	delay_us(50); 
09F0:  MOVLW  C7
09F2:  MOVWF  00
09F4:  DECFSZ 00,F
09F6:  BRA    09F4
09F8:  BRA    09FA
.................... 	m2 = i2c_read(0); 
09FA:  CLRF   00
09FC:  RCALL  088A
09FE:  CLRF   1F
0A00:  MOVFF  01,1E
.................... 	delay_us(50); 
0A04:  MOVLW  C7
0A06:  MOVWF  00
0A08:  DECFSZ 00,F
0A0A:  BRA    0A08
0A0C:  BRA    0A0E
.................... 	i2c_stop(); 
0A0E:  BCF    F93.0
0A10:  NOP   
0A12:  BSF    F93.1
0A14:  BTFSS  F81.1
0A16:  BRA    0A14
0A18:  MOVLW  11
0A1A:  MOVWF  00
0A1C:  DECFSZ 00,F
0A1E:  BRA    0A1C
0A20:  BRA    0A22
0A22:  NOP   
0A24:  BSF    F93.0
0A26:  MOVLW  11
0A28:  MOVWF  00
0A2A:  DECFSZ 00,F
0A2C:  BRA    0A2A
....................  
.................... 	m = (m << 8) | m2; 
0A2E:  MOVFF  1C,21
0A32:  CLRF   20
0A34:  MOVF   20,W
0A36:  IORWF  1E,W
0A38:  MOVWF  1C
0A3A:  MOVF   21,W
0A3C:  IORWF  1F,W
0A3E:  MOVWF  1D
.................... 	return m; 
0A40:  MOVFF  1C,01
0A44:  MOVFF  1D,02
0A48:  GOTO   0A76 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x50); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... 	delay_ms(80); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(MEASUREH); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02R); 
.................... 	delay_us(50); 
.................... 	m = i2c_read(); 
.................... 	delay_us(50); 
.................... 	m2 = i2c_read(0); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
....................  
.................... 	m = (m << 8) | m2; 
.................... 	return m; 
.................... } 
....................  
.................... unsigned int16 srf_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x52); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... 	delay_ms(80); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(MEASUREH); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02R); 
.................... 	delay_us(50); 
.................... 	m = i2c_read(); 
.................... 	delay_us(50); 
.................... 	m2 = i2c_read(0); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
....................  
.................... 	m = (m << 8) | m2; 
.................... 	return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x57); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... 	delay_ms(80); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(MEASUREH); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02R); 
.................... 	delay_us(50); 
.................... 	m = i2c_read(); 
.................... 	delay_us(50); 
.................... 	m2 = i2c_read(0); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
....................  
.................... 	m = (m << 8) | m2; 
.................... 	return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x56); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... 	delay_ms(80); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(MEASUREH); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02R); 
.................... 	delay_us(50); 
.................... 	m = i2c_read(); 
.................... 	delay_us(50); 
.................... 	m2 = i2c_read(0); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
....................  
.................... 	m = (m << 8) | m2; 
.................... 	return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x58); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... 	delay_ms(80); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(MEASUREH); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02R); 
.................... 	delay_us(50); 
.................... 	m = i2c_read(); 
.................... 	delay_us(50); 
.................... 	m2 = i2c_read(0); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
....................  
.................... 	m = (m << 8) | m2; 
.................... 	return m; 
.................... } 
....................  
.................... void srf_burst(){ 
....................  
.................... 	i2c_start(); 
.................... 	delay_us(50); 
.................... 	i2c_write(SRF02W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(0x5C); 
.................... 	delay_us(50); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "lcd03.h" 
.................... 	 
.................... #ifndef _LCD03_ 
.................... #define _LCD03_ 
....................  
.................... #define LCD03W 0xC6 
.................... #define LCD03R 0xC7 
.................... #define COMMAND 0x00 
.................... #define FIFO 0x00 
.................... #define KEYL 0x01 
.................... #define KEYH 0x02 
....................  
.................... void lcd_init(){ 
.................... 	delay_ms(1000); 
*
0830:  MOVLW  04
0832:  MOVWF  1C
0834:  MOVLW  FA
0836:  MOVWF  20
0838:  RCALL  0808
083A:  DECFSZ 1C,F
083C:  BRA    0834
083E:  GOTO   0A5E (RETURN)
.................... } 
....................  
.................... void lcd_clear(){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(12); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... void lcd_light_on(){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(19); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... void lcd_light_off(){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(20); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... void lcd_print(char *p){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	while (*p){ 
.................... 		delay_us(50); 
.................... 		i2c_write(*p++); 
.................... 	} 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... void lcd_print_char(char c){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(c); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... void lcd_send_command(unsigned int8 c){ 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(COMMAND); 
.................... 	delay_us(50); 
.................... 	i2c_write(c); 
.................... 	i2c_stop(); 
.................... } 
....................  
.................... unsigned int16 lcd_keyboard(){ 
.................... unsigned int16 keyb, keyb2; 
....................  
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(KEYL); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03R); 
.................... 	delay_us(50); 
.................... 	keyb = i2c_read(); 
.................... 	keyb2 = i2c_read(0); 
.................... 	keyb = keyb | (keyb2 << 8); 
.................... 	i2c_stop(); 
.................... 	return keyb; 
.................... } 
....................  
.................... char lcd_key_pressed(){ 
.................... unsigned int16 key; 
....................  
.................... 	key = lcd_keyboard(); 
.................... 	if (key & 0x0001){ 
.................... 		return '1'; 
.................... 	}else if (key & 0x0002){ 
.................... 		return '2'; 
.................... 	}else if (key & 0x0004){ 
.................... 		return '3'; 
.................... 	}else if (key & 0x0008){ 
.................... 		return '4'; 
.................... 	}else if (key & 0x0010){ 
.................... 		return '5'; 
.................... 	}else if (key & 0x0020){ 
.................... 		return '6'; 
.................... 	}else if (key & 0x0040){ 
.................... 		return '7'; 
.................... 	}else if (key & 0x0080){ 
.................... 		return '8'; 
.................... 	}else if (key & 0x0100){ 
.................... 		return '9'; 
.................... 	}else if (key & 0x0200){ 
.................... 		return '*'; 
.................... 	}else if (key & 0x0400){ 
.................... 		return '0'; 
.................... 	}else if (key & 0x0800){ 
.................... 		return '#'; 
.................... 	}else{ 
.................... 		return '\0'; 
.................... 	} 
.................... } 
....................  
.................... unsigned int8 lcd_fifo(){ 
.................... unsigned int8 tam; 
....................  
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03W); 
.................... 	delay_us(50); 
.................... 	i2c_write(FIFO); 
.................... 	delay_us(50); 
.................... 	i2c_start(); 
.................... 	i2c_write(LCD03R); 
.................... 	delay_us(50); 
.................... 	tam = i2c_read(0); 
.................... 	i2c_stop(); 
....................  
.................... 	return tam; 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... void main() { 
*
0A4C:  CLRF   FF8
0A4E:  BCF    FD0.7
0A50:  MOVF   FC1,W
0A52:  ANDLW  C0
0A54:  IORLW  0F
0A56:  MOVWF  FC1
0A58:  MOVLW  07
0A5A:  MOVWF  FB4
.................... unsigned int16 m; 
.................... char msg[21]; 
....................  
.................... lcd_init(); 
0A5C:  BRA    0830
.................... led_off(); 
0A5E:  BCF    F92.5
0A60:  BCF    F89.5
....................  
.................... /*set_tris_a(0x00); 
.................... set_tris_b(0x13); 
.................... set_tris_c(0x00); 
.................... set_tris_d(0x1F); 
.................... set_tris_e(0x00);*/ 
....................  
.................... while(1){ 
....................    led_on(); 
0A62:  BCF    F92.5
0A64:  BSF    F89.5
....................    delay_ms(500); 
0A66:  MOVLW  02
0A68:  MOVWF  1C
0A6A:  MOVLW  FA
0A6C:  MOVWF  20
0A6E:  RCALL  0808
0A70:  DECFSZ 1C,F
0A72:  BRA    0A6A
....................    m = srf_measure_cm(); 
0A74:  BRA    08D2
0A76:  MOVFF  02,06
0A7A:  MOVFF  01,05
....................    if(m > 50)  
0A7E:  MOVF   06,F
0A80:  BNZ   0A88
0A82:  MOVF   05,W
0A84:  SUBLW  32
0A86:  BC    0A8C
....................       led_off(); 
0A88:  BCF    F92.5
0A8A:  BCF    F89.5
....................    delay_ms(500); 
0A8C:  MOVLW  02
0A8E:  MOVWF  1C
0A90:  MOVLW  FA
0A92:  MOVWF  20
0A94:  RCALL  0808
0A96:  DECFSZ 1C,F
0A98:  BRA    0A90
0A9A:  BRA    0A62
.................... } 
....................  
.................... } 
0A9C:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
