CCS PCH C Compiler, Version 5.008, 5967               12-jun.-19 13:56

               Filename:   C:\Users\padul\Desktop\GitHub\SMP\i2c\2srf02\main.lst

               ROM used:   842 bytes (3%)
                           Largest free fragment is 29874
               RAM used:   5 (0%) at main() level
                           12 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0800:  GOTO   0B1E
.................... #include "mismov.h" 
.................... #ifndef _MISMOV_ 
.................... #define _MISMOV_ 
....................  
.................... #include "tarjeta.h" 
....................  
.................... #ifndef _TARJETA_ 
.................... #define _TARJETA_ 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
....................  
.................... #fuses USBDIV, CPUDIV1, PLL5, HSPLL, NOFCMEN, NOIESO, VREGEN, BORV21, BROWNOUT, NOPUT, WDT32768, NOWDT 
.................... #fuses MCLR, NOLPT1OSC, NOPBADEN, CCP2C1, NODEBUG, NOXINST, NOICPRT, NOLVP, STVREN, NOPROTECT, NOCPD 
.................... #fuses NOCPB, NOWRT, NOWRTD, WRTB, NOWRTC, NOEBTR, NOEBTRB 
....................  
.................... /*********************************************************** 
....................       EVITAMOS LA ZONA DE MEMORIA ASIGNADA AL MONITOR 
.................... ***********************************************************/ 
....................  
.................... #define LOADER_END   0x7FF 
.................... #define LOADER_SIZE   0x6FF 
....................  
.................... #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
.................... #org 0, LOADER_END {} 
.................... //#org 0x82A, 0x7FFF 
....................  
....................  
.................... /*********************************************************** 
....................            FUNCIONES PARA MOVER LOS MOTORES 
.................... MX_H() : Mueve el motor en sentido horario 
.................... MX_A() : Mueve el motor en sentido anti-horario 
.................... MX_P() : Para el motor 
.................... ***********************************************************/ 
....................  
.................... void M1_A(){ 
....................    output_high(PIN_A1); 
*
0832:  BCF    F92.1
0834:  BSF    F89.1
....................    output_high(PIN_D7); 
0836:  BCF    F95.7
0838:  BSF    F8C.7
....................    output_low(PIN_D6); 
083A:  BCF    F95.6
083C:  BCF    F8C.6
083E:  GOTO   0854 (RETURN)
.................... } 
....................  
.................... void M1_H(){ 
....................    output_high(PIN_A1); 
....................    output_low(PIN_D7); 
....................    output_high(PIN_D6); 
.................... } 
....................  
.................... void M1_P(){ 
....................    output_high(PIN_A1); 
*
0AF6:  BCF    F92.1
0AF8:  BSF    F89.1
....................    output_low(PIN_D7); 
0AFA:  BCF    F95.7
0AFC:  BCF    F8C.7
....................    output_low(PIN_D6); 
0AFE:  BCF    F95.6
0B00:  BCF    F8C.6
0B02:  GOTO   0B18 (RETURN)
.................... } 
....................  
.................... void M2_A(){ 
....................    output_high(PIN_A0); 
*
0842:  BCF    F92.0
0844:  BSF    F89.0
....................    output_high(PIN_C2); 
0846:  BCF    F94.2
0848:  BSF    F8B.2
....................    output_low(PIN_D5); 
084A:  BCF    F95.5
084C:  BCF    F8C.5
084E:  GOTO   0856 (RETURN)
.................... } 
....................  
.................... void M2_H(){ 
....................    output_high(PIN_A0); 
....................    output_low(PIN_C2); 
....................    output_high(PIN_D5); 
.................... } 
....................  
.................... void M2_P(){ 
....................    output_high(PIN_A0); 
*
0B06:  BCF    F92.0
0B08:  BSF    F89.0
....................    output_low(PIN_C2); 
0B0A:  BCF    F94.2
0B0C:  BCF    F8B.2
....................    output_low(PIN_D5); 
0B0E:  BCF    F95.5
0B10:  BCF    F8C.5
0B12:  GOTO   0B1A (RETURN)
.................... } 
....................  
.................... void M3_A(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_high(PIN_E0); 
.................... } 
....................  
.................... void M3_H(){ 
....................    output_high(PIN_A2); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M3_P(){ 
....................    output_high(PIN_A2); 
....................    output_low(PIN_B2); 
....................    output_low(PIN_E0); 
.................... } 
....................  
.................... void M4_A(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_high(PIN_E1); 
.................... } 
....................  
.................... void M4_H(){ 
....................    output_high(PIN_A3); 
....................    output_high(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
.................... void M4_P(){ 
....................    output_high(PIN_A3); 
....................    output_low(PIN_E2); 
....................    output_low(PIN_E1); 
.................... } 
....................  
....................  
.................... /*********************************************************** 
....................             MACRO PARA LEER EL PULSADOR P2 
.................... ***********************************************************/ 
....................  
.................... #define P2   (!input(PIN_B4)) 
....................  
.................... /*********************************************************** 
....................               MACROS PARA MANEJAR EL LED 
.................... ***********************************************************/ 
....................  
.................... #define led_on()   output_high(PIN_A5) 
.................... #define led_off()   output_low(PIN_A5) 
....................  
.................... /*********************************************************** 
....................            DEFINICION DE LAS E/S DIRECTAS 
.................... ***********************************************************/ 
....................  
.................... #define ES0   PIN_A4 
.................... #define ES1   PIN_B3 
.................... #define ES2   PIN_B5 
.................... #define ES3   PIN_B6 
.................... #define ES4   PIN_B7 
.................... #define ES5   PIN_C7 
.................... #define ES6   PIN_C6 
.................... #define ES7   PIN_C1 
.................... #define ES8   PIN_C0 
....................  
.................... /*********************************************************** 
....................         MACROS PARA LEER LOS SENSORES FIJOS INX 
.................... ***********************************************************/ 
....................  
.................... #define IN1      input(PIN_D0) 
.................... #define IN2      input(PIN_D1) 
.................... #define IN3      input(PIN_D2) 
.................... #define IN4      input(PIN_D3) 
.................... #define IN5      input(PIN_D4) 
.................... //IN6 ES UNA E/S CONFIGURABLE 
.................... //#define IN6      input(ES0) 
.................... //#define IN6      input(ES1) 
.................... // ... O CUALQUIER OTRA E/S DIRECTA 
....................  
.................... /*********************************************************** 
....................             DIRECTIVA PARA EL USO DEL I2C 
.................... ***********************************************************/ 
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1) 
*
0884:  MOVLW  08
0886:  MOVWF  01
0888:  NOP   
088A:  BCF    F8A.1
088C:  BCF    F93.1
088E:  NOP   
0890:  RLCF   0A,F
0892:  BCF    F8A.0
0894:  BTFSC  FD8.0
0896:  BSF    F93.0
0898:  BTFSS  FD8.0
089A:  BCF    F93.0
089C:  BSF    F93.1
089E:  BTFSS  F81.1
08A0:  BRA    089E
08A2:  DECFSZ 01,F
08A4:  BRA    0888
08A6:  NOP   
08A8:  BCF    F8A.1
08AA:  BCF    F93.1
08AC:  NOP   
08AE:  BSF    F93.0
08B0:  NOP   
08B2:  NOP   
08B4:  BSF    F93.1
08B6:  BTFSS  F81.1
08B8:  BRA    08B6
08BA:  CLRF   01
08BC:  NOP   
08BE:  BTFSC  F81.0
08C0:  BSF    01.0
08C2:  BCF    F8A.1
08C4:  BCF    F93.1
08C6:  BCF    F8A.0
08C8:  BCF    F93.0
08CA:  RETURN 0
*
08F6:  MOVLW  08
08F8:  MOVWF  0B
08FA:  MOVFF  00,0C
08FE:  BSF    F93.0
0900:  NOP   
0902:  BSF    F93.1
0904:  BTFSS  F81.1
0906:  BRA    0904
0908:  BTFSC  F81.0
090A:  BSF    FD8.0
090C:  BTFSS  F81.0
090E:  BCF    FD8.0
0910:  RLCF   01,F
0912:  NOP   
0914:  BCF    F93.1
0916:  BCF    F8A.1
0918:  DECFSZ 0B,F
091A:  BRA    08FE
091C:  BSF    F93.0
091E:  NOP   
0920:  BCF    F8A.0
0922:  MOVF   0C,W
0924:  BTFSS  FD8.2
0926:  BCF    F93.0
0928:  NOP   
092A:  BSF    F93.1
092C:  BTFSS  F81.1
092E:  BRA    092C
0930:  NOP   
0932:  BCF    F8A.1
0934:  BCF    F93.1
0936:  NOP   
0938:  BCF    F8A.0
093A:  BCF    F93.0
093C:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include "srf02.h" 
....................  
.................... #ifndef _SRF02_ 
.................... #define _SRF02_ 
....................  
.................... #define SRF02W 0xE0 
.................... #define COMMAND 0 
.................... #define SRF02R 0xE1 
.................... #define MEASUREH 2 
.................... #define MEASUREL 3 
.................... #use delay (clock=48000000) 
*
08CC:  CLRF   FEA
08CE:  MOVLW  0A
08D0:  MOVWF  FE9
08D2:  MOVF   FEF,W
08D4:  BZ    08F2
08D6:  MOVLW  0F
08D8:  MOVWF  01
08DA:  CLRF   00
08DC:  DECFSZ 00,F
08DE:  BRA    08DC
08E0:  DECFSZ 01,F
08E2:  BRA    08DA
08E4:  MOVLW  8F
08E6:  MOVWF  00
08E8:  DECFSZ 00,F
08EA:  BRA    08E8
08EC:  NOP   
08EE:  DECFSZ FEF,F
08F0:  BRA    08D6
08F2:  GOTO   09C0 (RETURN)
....................  
.................... unsigned int16 srf_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
*
093E:  BSF    F93.0
0940:  MOVLW  11
0942:  MOVWF  00
0944:  DECFSZ 00,F
0946:  BRA    0944
0948:  BSF    F93.1
094A:  MOVLW  11
094C:  MOVWF  00
094E:  DECFSZ 00,F
0950:  BRA    094E
0952:  BCF    F8A.0
0954:  BCF    F93.0
0956:  MOVLW  11
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
095E:  BCF    F8A.1
0960:  BCF    F93.1
....................    delay_us(50); 
0962:  MOVLW  C7
0964:  MOVWF  00
0966:  DECFSZ 00,F
0968:  BRA    0966
096A:  BRA    096C
....................    i2c_write(SRF02W); 
096C:  MOVLW  E0
096E:  MOVWF  0A
0970:  RCALL  0884
....................    delay_us(50); 
0972:  MOVLW  C7
0974:  MOVWF  00
0976:  DECFSZ 00,F
0978:  BRA    0976
097A:  BRA    097C
....................    i2c_write(COMMAND); 
097C:  CLRF   0A
097E:  RCALL  0884
....................    delay_us(50); 
0980:  MOVLW  C7
0982:  MOVWF  00
0984:  DECFSZ 00,F
0986:  BRA    0984
0988:  BRA    098A
....................    i2c_write(0x51); 
098A:  MOVLW  51
098C:  MOVWF  0A
098E:  RCALL  0884
....................    delay_us(50); 
0990:  MOVLW  C7
0992:  MOVWF  00
0994:  DECFSZ 00,F
0996:  BRA    0994
0998:  BRA    099A
....................    i2c_stop(); 
099A:  BCF    F93.0
099C:  NOP   
099E:  BSF    F93.1
09A0:  BTFSS  F81.1
09A2:  BRA    09A0
09A4:  MOVLW  11
09A6:  MOVWF  00
09A8:  DECFSZ 00,F
09AA:  BRA    09A8
09AC:  BRA    09AE
09AE:  NOP   
09B0:  BSF    F93.0
09B2:  MOVLW  11
09B4:  MOVWF  00
09B6:  DECFSZ 00,F
09B8:  BRA    09B6
....................    delay_ms(80); 
09BA:  MOVLW  50
09BC:  MOVWF  0A
09BE:  BRA    08CC
....................    i2c_start(); 
09C0:  BSF    F93.0
09C2:  MOVLW  11
09C4:  MOVWF  00
09C6:  DECFSZ 00,F
09C8:  BRA    09C6
09CA:  BSF    F93.1
09CC:  MOVLW  11
09CE:  MOVWF  00
09D0:  DECFSZ 00,F
09D2:  BRA    09D0
09D4:  BCF    F8A.0
09D6:  BCF    F93.0
09D8:  MOVLW  11
09DA:  MOVWF  00
09DC:  DECFSZ 00,F
09DE:  BRA    09DC
09E0:  BCF    F8A.1
09E2:  BCF    F93.1
....................    delay_us(50); 
09E4:  MOVLW  C7
09E6:  MOVWF  00
09E8:  DECFSZ 00,F
09EA:  BRA    09E8
09EC:  BRA    09EE
....................    i2c_write(SRF02W); 
09EE:  MOVLW  E0
09F0:  MOVWF  0A
09F2:  RCALL  0884
....................    delay_us(50); 
09F4:  MOVLW  C7
09F6:  MOVWF  00
09F8:  DECFSZ 00,F
09FA:  BRA    09F8
09FC:  BRA    09FE
....................    i2c_write(MEASUREH); 
09FE:  MOVLW  02
0A00:  MOVWF  0A
0A02:  RCALL  0884
....................    delay_us(50); 
0A04:  MOVLW  C7
0A06:  MOVWF  00
0A08:  DECFSZ 00,F
0A0A:  BRA    0A08
0A0C:  BRA    0A0E
....................    i2c_start(); 
0A0E:  BSF    F93.0
0A10:  MOVLW  11
0A12:  MOVWF  00
0A14:  DECFSZ 00,F
0A16:  BRA    0A14
0A18:  BSF    F93.1
0A1A:  MOVLW  11
0A1C:  MOVWF  00
0A1E:  DECFSZ 00,F
0A20:  BRA    0A1E
0A22:  BTFSS  F81.1
0A24:  BRA    0A22
0A26:  BCF    F8A.0
0A28:  BCF    F93.0
0A2A:  MOVLW  11
0A2C:  MOVWF  00
0A2E:  DECFSZ 00,F
0A30:  BRA    0A2E
0A32:  BCF    F8A.1
0A34:  BCF    F93.1
....................    delay_us(50); 
0A36:  MOVLW  C7
0A38:  MOVWF  00
0A3A:  DECFSZ 00,F
0A3C:  BRA    0A3A
0A3E:  BRA    0A40
....................    i2c_write(SRF02R); 
0A40:  MOVLW  E1
0A42:  MOVWF  0A
0A44:  RCALL  0884
....................    delay_us(50); 
0A46:  MOVLW  C7
0A48:  MOVWF  00
0A4A:  DECFSZ 00,F
0A4C:  BRA    0A4A
0A4E:  BRA    0A50
....................    m = i2c_read(); 
0A50:  MOVLW  01
0A52:  MOVWF  00
0A54:  RCALL  08F6
0A56:  CLRF   07
0A58:  MOVFF  01,06
....................    delay_us(50); 
0A5C:  MOVLW  C7
0A5E:  MOVWF  00
0A60:  DECFSZ 00,F
0A62:  BRA    0A60
0A64:  BRA    0A66
....................    m2 = i2c_read(0); 
0A66:  CLRF   00
0A68:  RCALL  08F6
0A6A:  CLRF   09
0A6C:  MOVFF  01,08
....................    delay_us(50); 
0A70:  MOVLW  C7
0A72:  MOVWF  00
0A74:  DECFSZ 00,F
0A76:  BRA    0A74
0A78:  BRA    0A7A
....................    i2c_stop(); 
0A7A:  BCF    F93.0
0A7C:  NOP   
0A7E:  BSF    F93.1
0A80:  BTFSS  F81.1
0A82:  BRA    0A80
0A84:  MOVLW  11
0A86:  MOVWF  00
0A88:  DECFSZ 00,F
0A8A:  BRA    0A88
0A8C:  BRA    0A8E
0A8E:  NOP   
0A90:  BSF    F93.0
0A92:  MOVLW  11
0A94:  MOVWF  00
0A96:  DECFSZ 00,F
0A98:  BRA    0A96
....................  
....................    m = (m << 8) | m2; 
0A9A:  MOVFF  06,0B
0A9E:  CLRF   0A
0AA0:  MOVF   0A,W
0AA2:  IORWF  08,W
0AA4:  MOVWF  06
0AA6:  MOVF   0B,W
0AA8:  IORWF  09,W
0AAA:  MOVWF  07
....................    return m; 
0AAC:  MOVFF  06,01
0AB0:  MOVFF  07,02
0AB4:  GOTO   0AD4 (RETURN)
.................... } 
....................  
.................... unsigned int16 srf_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x50); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x52); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_cm(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x57); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_in(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x56); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... unsigned int16 srf_false_measure_us(){ 
.................... unsigned int16 m, m2; 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x58); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................    delay_ms(80); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(MEASUREH); 
....................    delay_us(50); 
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02R); 
....................    delay_us(50); 
....................    m = i2c_read(); 
....................    delay_us(50); 
....................    m2 = i2c_read(0); 
....................    delay_us(50); 
....................    i2c_stop(); 
....................  
....................    m = (m << 8) | m2; 
....................    return m; 
.................... } 
....................  
.................... void srf_burst(){ 
....................  
....................    i2c_start(); 
....................    delay_us(50); 
....................    i2c_write(SRF02W); 
....................    delay_us(50); 
....................    i2c_write(COMMAND); 
....................    delay_us(50); 
....................    i2c_write(0x5C); 
....................    delay_us(50); 
....................    i2c_stop(); 
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
085A:  CLRF   FEA
085C:  MOVLW  06
085E:  MOVWF  FE9
0860:  MOVF   FEF,W
0862:  BZ    0880
0864:  MOVLW  0F
0866:  MOVWF  01
0868:  CLRF   00
086A:  DECFSZ 00,F
086C:  BRA    086A
086E:  DECFSZ 01,F
0870:  BRA    0868
0872:  MOVLW  8F
0874:  MOVWF  00
0876:  DECFSZ 00,F
0878:  BRA    0876
087A:  NOP   
087C:  DECFSZ FEF,F
087E:  BRA    0864
0880:  GOTO   0AD2 (RETURN)
....................  
.................... void DELANTE(){ 
....................    M1_A(); 
*
0852:  BRA    0832
....................    M2_A(); 
0854:  BRA    0842
0856:  GOTO   0B3E (RETURN)
.................... } 
....................  
.................... void ATRAS(){ 
....................    M1_H(); 
....................    M2_H(); 
.................... } 
....................  
.................... void PARAR(){ 
....................    M1_P(); 
*
0B16:  BRA    0AF6
....................    M2_P(); 
0B18:  BRA    0B06
0B1A:  GOTO   0B4A (RETURN)
.................... } 
....................  
.................... void DISPARAR(){ 
....................    M3_H(); 
....................    M4_H(); 
.................... } 
....................  
.................... void RECOGER(){ 
....................    M3_A(); 
....................    M4_A(); 
.................... } 
....................  
.................... void IMPACTO(){ 
....................    DISPARAR(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(700); 
....................    RECOGER(); 
....................    delay_ms(250); 
....................    PARAR(); 
....................    delay_ms(500); 
.................... } 
....................  
.................... void DERECHA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_P(); 
....................    M2_H(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... void IZQUIERDA(long int t){ 
....................    PARAR(); 
....................    delay_ms(400); 
....................    M1_H(); 
....................    M2_P(); 
....................    delay_ms(t); 
....................    PARAR(); 
....................    delay_ms(250); 
.................... } 
....................  
.................... int ULTRA_SONIDOS(int dist){ 
....................    set_tris_a(0x00); 
*
0AB8:  MOVLW  00
0ABA:  MOVWF  F92
....................    set_tris_b(0x13); 
0ABC:  MOVLW  13
0ABE:  MOVWF  F93
....................    set_tris_c(0x00); 
0AC0:  MOVLW  00
0AC2:  MOVWF  F94
....................    set_tris_d(0x1F); 
0AC4:  MOVLW  1F
0AC6:  MOVWF  F95
....................    set_tris_e(0x00); 
0AC8:  MOVLW  00
0ACA:  MOVWF  F96
....................     
....................    delay_ms(1); 
0ACC:  MOVLW  01
0ACE:  MOVWF  06
0AD0:  BRA    085A
....................    if(srf_measure_cm() < dist)  
0AD2:  BRA    093E
0AD4:  MOVFF  02,07
0AD8:  MOVFF  01,06
0ADC:  MOVF   07,F
0ADE:  BNZ   0AEE
0AE0:  MOVF   05,W
0AE2:  SUBWF  06,W
0AE4:  BC    0AEE
....................       return 1; 
0AE6:  MOVLW  01
0AE8:  MOVWF  01
0AEA:  BRA    0AF2
0AEC:  BRA    0AF2
....................    else 
....................       return 0; 
0AEE:  MOVLW  00
0AF0:  MOVWF  01
0AF2:  GOTO   0B44 (RETURN)
.................... } 
....................  
.................... #endif 
....................  
.................... #use delay (clock=48000000) 
*
0808:  CLRF   FEA
080A:  MOVLW  06
080C:  MOVWF  FE9
080E:  MOVF   FEF,W
0810:  BZ    082E
0812:  MOVLW  0F
0814:  MOVWF  01
0816:  CLRF   00
0818:  DECFSZ 00,F
081A:  BRA    0818
081C:  DECFSZ 01,F
081E:  BRA    0816
0820:  MOVLW  8F
0822:  MOVWF  00
0824:  DECFSZ 00,F
0826:  BRA    0824
0828:  NOP   
082A:  DECFSZ FEF,F
082C:  BRA    0812
082E:  GOTO   0B38 (RETURN)
....................  
.................... void main() { 
*
0B1E:  CLRF   FF8
0B20:  BCF    FD0.7
0B22:  MOVF   FC1,W
0B24:  ANDLW  C0
0B26:  IORLW  0F
0B28:  MOVWF  FC1
0B2A:  MOVLW  07
0B2C:  MOVWF  FB4
....................     
....................    delay_ms(3000); 
0B2E:  MOVLW  0C
0B30:  MOVWF  05
0B32:  MOVLW  FA
0B34:  MOVWF  06
0B36:  BRA    0808
0B38:  DECFSZ 05,F
0B3A:  BRA    0B32
....................    DELANTE(); 
0B3C:  BRA    0852
....................    while(1){ 
....................       if(ULTRA_SONIDOS(60)){ 
0B3E:  MOVLW  3C
0B40:  MOVWF  05
0B42:  BRA    0AB8
0B44:  MOVF   01,F
0B46:  BZ    0B4A
....................          PARAR(); 
0B48:  BRA    0B16
....................          //DERECHA(600); 
....................       } 
0B4A:  BRA    0B3E
....................    } 
.................... } 
0B4C:  SLEEP 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8100   CCP2C1 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
